/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package org.purescript.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static org.purescript.parser.PSTokensKt.*;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.psi.TokenType.BAD_CHARACTER;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>C:/Users/neppord/code/intellij-purescript/src/main/grammar/Purescript.flex</tt>
 */
class _PSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRINGS = 4;
  public static final int BLOCK_STRINGS = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 26080 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char[] ZZ_CMAP_Z = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\1\23\1\24\1\21\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\44\1\45\1\44\1\46\1\44\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\44\31\21\1\57\121\21\1\60\4\21\1\61\1\21\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\53\21\1\70\41\71\1\21\1\72\1\73\1\21\1\74\1\75\1\76\1"+
    "\77\1\100\1\101\1\102\1\103\1\104\1\21\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\71\1\113\1\71\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\71"+
    "\1\125\1\71\1\126\3\71\3\21\1\127\1\130\1\131\12\71\4\21\1\132\17\71\2\21"+
    "\1\133\41\71\2\21\1\134\1\135\3\71\1\136\27\21\1\137\2\21\1\140\45\71\1\141"+
    "\13\71\1\142\23\71\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\2\44\1"+
    "\153\5\71\1\154\7\71\1\155\1\156\4\71\1\157\1\71\1\160\1\161\1\162\3\44\1"+
    "\163\1\164\1\165\1\166\6\71\246\21\1\167\20\21\1\170\1\171\25\21\1\172\51"+
    "\71\2\21\1\173\u0b06\71\1\174\u02fe\71");

  /* The ZZ_CMAP_Y table has 8000 entries */
  static final char[] ZZ_CMAP_Y = zzUnpackCMap(
    "\2\0\1\1\1\2\4\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\0\1\33\6\0\1"+
    "\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\5\44\1\45\1\44\1\46\1\47\4\50\1\51"+
    "\2\50\16\52\4\53\1\54\13\52\1\55\1\56\1\57\1\60\1\61\1\62\1\55\1\60\1\63\1"+
    "\55\1\52\1\60\1\56\1\60\1\61\1\53\1\64\1\63\1\65\1\66\1\67\4\53\1\54\4\52"+
    "\1\70\1\60\17\52\1\50\1\62\1\57\1\53\1\46\2\52\21\50\1\71\6\50\4\65\1\72\1"+
    "\73\2\65\1\72\3\74\1\65\1\75\1\74\1\76\4\74\34\65\1\52\1\77\1\100\1\101\1"+
    "\0\1\102\1\103\1\104\1\61\3\44\1\105\2\44\10\50\1\106\1\62\1\63\6\52\1\50"+
    "\1\107\1\57\1\61\14\44\14\50\10\52\1\110\1\65\1\111\15\52\1\55\2\53\1\56\30"+
    "\52\1\112\10\44\1\103\1\113\1\0\1\114\11\50\1\0\1\115\1\116\12\65\1\117\1"+
    "\120\1\117\2\0\6\65\1\43\1\0\1\43\4\0\1\34\1\121\1\34\2\65\1\43\1\0\22\65"+
    "\1\122\1\123\31\65\1\116\1\65\1\124\2\65\1\125\4\65\1\126\4\0\16\65\1\43\1"+
    "\116\30\65\1\122\3\0\15\65\1\127\1\130\1\0\13\65\1\122\4\0\7\65\21\0\5\65"+
    "\1\131\1\65\1\122\5\0\3\65\1\117\40\65\1\123\2\65\1\116\4\65\1\116\1\65\2"+
    "\132\5\65\1\131\1\65\1\133\1\123\1\122\2\65\2\132\1\43\1\0\1\134\1\0\1\117"+
    "\1\65\1\123\2\65\1\72\1\65\1\72\1\0\2\116\1\43\1\134\1\132\5\65\1\131\1\65"+
    "\1\131\1\120\1\122\1\131\1\43\1\134\1\132\1\122\1\113\1\0\1\116\1\133\1\0"+
    "\1\123\3\65\1\122\2\0\2\116\1\65\2\117\5\65\1\131\1\65\1\131\1\116\1\122\2"+
    "\65\2\117\1\122\1\135\3\0\1\65\1\123\2\65\1\136\1\0\1\113\1\0\2\116\1\65\2"+
    "\132\5\65\1\131\1\65\1\131\1\116\1\122\2\65\2\132\1\122\1\0\1\123\1\0\1\117"+
    "\1\65\1\123\2\65\1\137\1\65\2\0\1\123\1\116\1\43\1\123\1\131\1\122\1\120\1"+
    "\131\1\134\1\135\1\43\1\123\2\65\1\122\1\123\1\43\1\123\1\131\1\122\1\135"+
    "\1\134\3\0\1\123\2\65\1\140\1\74\1\35\1\0\1\65\1\116\1\65\2\131\5\65\1\131"+
    "\3\65\1\122\1\116\1\65\2\131\1\122\1\0\1\120\1\43\1\0\1\65\1\123\2\65\2\0"+
    "\1\65\1\140\1\65\1\116\1\65\2\131\5\65\1\131\2\65\1\116\1\122\2\65\2\131\1"+
    "\122\1\0\1\120\1\0\1\130\1\65\1\123\2\65\1\120\3\0\2\116\1\65\2\131\11\65"+
    "\1\43\1\116\1\65\2\131\1\140\1\0\4\65\1\123\4\65\1\125\1\65\1\123\1\116\3"+
    "\65\1\43\1\123\5\65\1\117\2\65\1\113\1\65\1\43\1\130\1\134\1\65\1\133\2\65"+
    "\1\0\1\123\2\65\1\123\3\0\1\116\15\65\1\43\1\141\3\65\1\43\2\65\1\122\11\0"+
    "\1\120\1\132\1\133\1\113\1\0\1\65\1\116\1\65\1\116\1\142\1\123\1\116\2\65"+
    "\1\117\1\122\1\65\1\133\1\65\1\122\2\65\1\122\1\65\10\0\1\75\3\0\1\141\1\115"+
    "\1\72\1\74\5\65\1\143\1\144\1\123\2\65\1\116\10\65\1\135\1\116\4\65\1\131"+
    "\4\65\1\116\10\65\1\145\1\74\1\146\1\74\1\37\1\0\1\115\1\147\11\0\22\65\1"+
    "\122\1\0\23\65\1\72\11\44\1\105\1\0\1\150\12\65\1\43\123\65\1\131\1\122\1"+
    "\65\1\43\1\131\1\122\12\65\1\131\1\122\10\65\1\131\1\122\1\65\1\43\1\131\1"+
    "\122\3\65\1\43\16\65\1\131\1\122\20\65\1\43\1\116\2\0\1\116\4\65\1\135\4\65"+
    "\2\74\1\151\1\0\25\44\1\152\1\50\1\153\1\116\132\65\1\132\4\65\1\116\5\65"+
    "\1\43\1\0\22\65\1\43\1\123\2\65\1\135\1\0\3\65\1\131\1\65\1\135\2\0\5\65\1"+
    "\135\2\0\5\65\3\0\3\65\2\131\3\0\25\65\1\134\1\141\1\122\2\65\1\122\1\0\2"+
    "\65\1\122\3\0\1\134\1\122\2\65\1\122\1\0\26\65\2\0\12\65\1\43\1\0\21\65\1"+
    "\122\2\0\7\65\1\43\3\65\1\0\3\65\1\0\1\147\1\123\11\65\1\122\1\65\1\135\2"+
    "\0\13\65\1\0\6\65\1\122\1\0\2\65\1\43\1\34\10\74\7\65\1\0\17\65\1\43\7\65"+
    "\1\132\2\65\1\122\1\0\2\65\1\122\2\0\1\134\2\0\3\65\1\43\20\0\23\65\1\0\2"+
    "\65\1\122\1\0\1\115\1\74\1\154\2\65\2\74\1\147\35\65\3\0\16\65\2\0\2\65\1"+
    "\122\1\116\13\65\1\122\2\50\1\155\21\0\1\43\10\65\1\43\1\122\1\0\13\50\17"+
    "\65\1\156\3\50\1\71\7\50\1\157\26\65\1\122\1\134\1\65\45\52\1\63\1\50\1\54"+
    "\30\52\2\50\2\44\1\50\1\153\1\44\1\152\2\50\2\44\2\50\2\44\1\50\1\153\1\44"+
    "\1\152\2\50\2\160\2\50\2\44\3\50\1\153\2\50\2\65\2\50\2\65\2\50\2\65\1\50"+
    "\1\161\1\44\1\162\1\163\1\161\1\44\1\75\1\50\1\164\1\44\1\115\2\50\1\44\1"+
    "\165\1\164\1\161\1\44\1\166\12\0\1\167\6\0\1\147\2\0\1\170\7\0\1\122\1\65"+
    "\1\72\1\171\2\65\1\72\1\147\3\65\1\135\3\74\1\172\3\74\1\35\4\0\10\65\1\135"+
    "\3\0\1\173\1\174\1\175\1\176\1\46\1\177\1\200\1\201\1\74\1\202\1\203\1\204"+
    "\1\44\1\205\1\206\1\62\1\74\1\207\1\210\1\211\4\65\4\212\4\65\1\213\1\205"+
    "\1\72\1\0\1\214\17\74\1\215\13\74\1\216\14\74\1\217\64\74\1\0\7\74\1\121\64"+
    "\74\1\35\11\74\1\35\6\0\2\74\1\35\5\0\17\65\6\74\1\220\6\221\6\74\1\40\5\65"+
    "\132\74\3\0\1\123\7\65\14\74\1\121\7\74\1\151\2\0\44\74\1\35\5\0\1\115\17"+
    "\74\1\0\10\74\1\34\35\74\1\34\7\74\1\151\10\74\1\151\1\115\2\74\1\37\1\74"+
    "\1\151\6\0\1\74\4\0\13\44\1\103\13\50\1\222\1\60\1\223\1\53\1\61\1\52\1\56"+
    "\1\50\1\224\31\52\1\225\1\174\1\226\1\111\2\0\1\113\11\50\1\227\1\0\1\230"+
    "\16\65\1\0\1\134\3\0\1\134\5\65\1\43\2\0\1\65\1\43\1\65\1\43\1\65\1\43\1\65"+
    "\1\43\1\65\1\43\1\65\1\43\1\65\1\43\1\65\1\43\10\65\13\0\1\134\24\0\6\74\1"+
    "\231\26\74\3\0\65\74\1\151\6\0\3\74\2\0\1\137\2\0\1\34\3\0\1\137\3\65\1\116"+
    "\1\72\1\65\1\145\1\116\24\65\1\43\1\232\1\137\1\116\25\65\1\43\1\65\1\0\1"+
    "\116\11\65\1\122\1\116\26\65\1\43\1\40\1\72\2\74\6\65\1\43\1\0\11\74\3\0\4"+
    "\65\7\74\1\35\2\65\1\72\7\74\2\65\1\137\3\65\10\74\2\65\1\72\11\74\1\137\3"+
    "\65\17\74\1\35\55\65\1\122\2\0\20\74\65\65\1\122\12\0\43\65\1\135\15\74\1"+
    "\35\2\0\13\65\1\122\3\65\1\135\7\65\5\0\13\52\1\233\1\43\2\65\1\117\7\52\25"+
    "\65\1\122\3\0\5\74\1\154\2\65\1\234\3\52\1\54\17\52\1\71\1\50\1\53\1\57\2"+
    "\52\1\235\1\226\1\52\1\54\4\52\1\60\1\103\1\44\1\52\17\0\1\134\1\236\13\65"+
    "\1\74\1\0\1\65\1\72\1\151\1\0\15\65\3\0\21\65\1\122\2\0\2\65\1\122\1\0\6\65"+
    "\1\134\1\113\13\65\1\122\11\65\3\0\7\65\1\135\20\65\1\135\2\0\1\134\2\65\1"+
    "\122\1\0\7\65\1\43\15\65\1\43\2\0\3\65\1\122\2\65\1\122\1\0\5\65\1\140\1\40"+
    "\21\65\1\43\5\0\1\134\1\122\4\65\1\123\1\43\2\0\1\116\1\43\1\116\1\43\1\116"+
    "\1\43\2\0\1\65\1\43\1\65\1\43\12\50\1\51\1\65\1\50\1\153\2\0\24\50\12\65\1"+
    "\43\1\122\2\65\1\122\1\0\51\65\3\0\5\65\1\43\1\134\14\65\101\0\33\65\1\122"+
    "\32\65\1\122\11\0\1\50\1\222\2\0\1\237\1\50\1\0\1\116\2\65\1\125\2\65\1\43"+
    "\1\65\1\133\1\117\1\131\32\65\1\72\3\74\1\151\3\0\1\134\32\65\1\122\4\0\20"+
    "\65\1\123\15\65\12\0\3\65\1\151\4\65\4\0\4\65\14\0\1\170\1\35\1\136\1\0\1"+
    "\65\1\131\41\65\1\135\1\0\1\147\1\141\1\0\2\65\1\122\1\35\1\112\5\44\1\103"+
    "\1\170\1\240\5\50\1\222\1\241\1\0\1\123\25\65\1\43\1\123\1\65\1\123\1\65\1"+
    "\123\1\65\1\123\1\135\1\74\1\35\1\74\1\35\3\0\1\151\3\65\1\116\5\65\1\43\4"+
    "\65\1\43\1\117\3\65\1\122\3\65\1\122\10\0\36\65\1\43\2\0\1\134\13\65\1\141"+
    "\2\74\16\65\1\75\3\74\1\40\1\35\3\74\1\0\1\147\13\0\13\74\1\144\40\0\7\65"+
    "\1\135\14\65\1\135\3\0\7\65\1\0\11\65\3\0\6\65\1\43\1\0\12\65\1\43\1\0\7\65"+
    "\1\122\11\65\1\0\2\65\1\116\1\122\12\0\12\44\12\50\23\65\1\122\2\65\1\122"+
    "\1\0\11\44\1\0\11\50\1\0\12\65\2\0\15\65\47\0\15\65\1\43\2\0\5\65\1\122\2"+
    "\0\2\65\46\0\1\65\1\122\1\131\12\65\1\117\1\135\1\132\5\65\1\122\7\65\1\140"+
    "\1\137\10\65\1\43\1\0\1\134\2\65\14\0\4\65\1\43\1\122\1\134\10\65\1\0\6\65"+
    "\1\122\21\0\16\65\1\0\5\65\1\123\14\65\1\120\1\0\2\65\2\116\6\65\1\0\1\43"+
    "\1\134\2\65\6\0\7\65\1\43\10\65\10\0\2\65\1\137\6\65\1\43\1\134\1\65\4\0\15"+
    "\65\1\122\2\0\5\65\1\122\6\65\1\43\1\0\6\65\1\122\5\0\1\116\1\65\24\0\22\65"+
    "\1\135\15\0\14\44\1\103\3\0\14\50\1\222\1\0\1\123\1\65\30\0\7\65\1\43\40\0"+
    "\21\65\1\43\2\0\1\123\7\65\3\0\1\134\16\65\1\43\5\0\6\65\1\135\1\0\2\65\1"+
    "\122\1\0\15\65\1\131\2\65\4\0\11\65\1\130\2\0\21\65\1\135\1\123\1\135\2\65"+
    "\1\43\1\135\1\116\4\65\1\135\2\0\4\65\1\117\11\65\1\0\1\130\20\0\1\65\1\43"+
    "\1\131\1\117\3\65\1\117\2\65\1\135\1\0\16\65\1\43\1\0\2\65\1\122\1\0\1\65"+
    "\1\116\1\65\2\132\5\65\1\131\1\65\1\131\1\116\1\122\2\65\2\132\1\122\1\135"+
    "\1\134\1\0\1\116\1\65\1\123\1\65\1\135\1\65\1\135\42\0\22\65\1\43\1\0\2\65"+
    "\1\122\11\0\21\65\1\117\2\0\2\65\1\122\51\0\15\65\1\122\2\65\1\135\5\0\1\65"+
    "\1\122\10\0\20\65\2\135\2\0\2\65\1\122\11\0\16\65\2\0\2\65\1\122\15\0\6\65"+
    "\1\122\1\116\3\65\1\0\3\65\1\141\130\0\10\44\10\50\4\65\1\43\2\0\1\134\60"+
    "\0\16\65\1\135\1\0\2\65\1\131\12\65\1\43\2\65\1\135\3\0\7\65\1\135\1\123\7"+
    "\65\1\123\5\65\1\116\2\65\1\43\22\0\46\65\1\122\31\0\33\65\1\43\4\0\61\65"+
    "\57\0\13\65\1\43\64\0\21\65\1\43\56\0\16\65\1\135\1\0\7\65\1\43\2\65\1\122"+
    "\31\0\7\65\1\122\1\65\1\135\2\0\15\65\1\43\1\0\1\74\1\65\1\136\2\0\2\65\1"+
    "\117\1\65\1\117\5\65\1\0\1\116\4\65\34\0\21\65\1\135\2\0\13\65\1\43\3\0\1"+
    "\134\4\65\20\0\1\135\7\0\73\65\1\135\4\0\74\65\1\43\3\0\1\122\77\0\32\65\1"+
    "\43\1\0\3\65\1\135\2\65\1\135\1\0\2\65\1\122\1\42\30\0\75\74\1\151\2\0\11"+
    "\74\1\35\1\115\16\74\1\137\1\72\1\137\1\43\1\0\1\134\1\65\1\140\1\137\1\65"+
    "\7\74\1\40\1\72\16\74\1\147\5\0\20\74\1\40\1\242\56\0\25\74\1\35\2\0\4\65"+
    "\1\122\43\0\6\44\1\176\6\50\6\44\1\176\1\50\1\161\4\50\6\44\1\176\6\50\1\104"+
    "\1\243\1\244\1\112\1\104\1\44\1\176\1\227\1\114\1\50\1\114\2\50\6\44\1\176"+
    "\6\50\1\105\1\103\1\112\1\44\1\104\1\44\1\245\6\50\1\105\1\103\1\44\1\246"+
    "\1\247\1\44\1\245\6\50\6\44\1\176\6\50\6\44\1\176\6\50\6\44\1\176\6\50\6\44"+
    "\1\176\6\50\6\44\1\176\6\50\6\44\1\176\6\50\1\153\6\44\1\250\5\50\1\51\1\50"+
    "\1\62\5\44\1\45\6\50\1\251\1\50\6\44\1\250\5\50\1\51\1\50\1\62\5\44\1\45\6"+
    "\50\1\251\1\50\6\44\1\250\5\50\1\51\1\50\1\54\1\123\31\65\1\140\1\154\14\65"+
    "\1\75\1\74\1\252\3\74\1\166\4\0\1\134\1\65\1\116\3\65\24\0\1\65\1\43\4\65"+
    "\1\132\1\65\1\117\1\131\1\43\65\0\61\65\1\132\3\65\1\43\12\0\10\44\1\176\10"+
    "\50\1\65\1\43\1\0\2\65\1\122\51\0\1\65\1\116\6\65\1\120\1\132\1\116\1\65\1"+
    "\43\1\65\1\142\1\0\1\130\1\134\1\142\1\116\1\120\1\132\2\142\1\120\1\132\1"+
    "\43\1\65\1\43\1\65\1\116\1\133\2\65\1\117\4\65\1\0\2\116\1\117\4\65\15\0\1"+
    "\151\3\0\13\74\1\0\31\74\3\0\3\74\1\35\1\115\3\74\1\115\3\74\1\115\10\74\1"+
    "\151\2\0\3\65\1\135\7\74\1\35\6\221\1\253\1\74\6\221\1\253\1\0\6\221\1\253"+
    "\10\74\1\147\15\0\1\34\6\74\1\35\3\0\13\74\1\0\2\74\1\147\1\0\1\151\53\0\64"+
    "\74\1\35\3\0\3\74\1\147\1\74\1\35\2\0\35\74\3\0\25\74\1\147\12\0\3\74\1\0"+
    "\16\74\2\0\2\74\1\151\1\0\12\74\2\0\7\74\1\151\30\0\3\74\1\35\2\74\2\0\1\121"+
    "\2\74\1\35\3\74\1\0\3\74\1\35\10\0\4\74\1\151\13\0\1\147\17\0\65\65\1\43\12"+
    "\0\15\65\1\135\2\0\67\65\1\122\140\65\1\122\27\0\7\65\1\122\70\0\74\65\4\0");

  /* The ZZ_CMAP_A table has 688 entries */
  static final char[] ZZ_CMAP_A = zzUnpackCMap(
    "\5\0\1\1\1\71\1\146\2\145\2\0\1\67\1\2\1\22\1\2\1\11\1\2\1\31\1\6\1\140\1"+
    "\141\1\2\1\30\1\137\1\27\1\24\1\2\1\117\1\55\1\56\1\57\1\60\2\21\1\135\1\12"+
    "\1\126\1\131\1\132\1\124\1\121\1\122\2\2\1\52\1\33\1\42\1\54\1\26\1\40\1\46"+
    "\1\35\1\44\1\16\1\53\1\37\1\45\1\50\1\20\1\44\1\51\1\43\1\34\1\36\1\47\1\41"+
    "\1\16\1\14\1\61\1\16\1\142\1\23\1\143\1\62\1\4\1\136\1\73\1\32\1\107\1\72"+
    "\1\25\1\101\1\104\1\113\1\103\2\15\1\106\1\105\1\77\1\17\1\76\1\15\1\102\1"+
    "\110\1\74\1\112\1\111\1\100\1\13\1\75\1\15\1\65\1\70\1\66\1\144\2\0\1\146"+
    "\4\0\5\10\1\0\2\10\1\5\1\0\1\10\1\0\4\10\2\5\1\10\1\3\1\0\1\133\1\10\2\5\1"+
    "\0\3\5\1\0\7\7\1\10\3\7\3\3\1\114\10\3\1\10\1\7\1\3\1\7\2\3\1\7\1\3\1\7\2"+
    "\3\1\7\1\3\2\7\1\3\1\7\1\3\1\7\3\3\2\7\1\3\1\7\1\3\2\7\1\3\3\7\2\3\3\7\3\3"+
    "\1\7\2\3\5\5\1\7\1\5\1\3\1\7\1\5\1\3\1\7\1\5\1\3\1\7\1\5\1\3\1\5\3\3\2\5\4"+
    "\10\1\115\1\5\4\10\1\5\3\10\1\5\1\10\1\5\1\10\1\5\1\10\1\7\1\3\2\0\1\5\3\3"+
    "\1\0\1\7\2\10\1\7\1\0\3\7\1\0\1\7\1\0\4\7\1\0\1\7\3\3\2\7\1\3\1\10\2\7\1\3"+
    "\1\10\3\5\1\7\1\3\1\0\3\7\1\0\1\5\3\0\3\3\1\0\3\10\1\0\5\5\1\0\1\5\1\0\2\5"+
    "\1\0\1\10\2\0\1\10\2\5\4\0\3\5\1\0\1\10\2\5\1\10\3\5\2\10\3\5\1\10\3\0\1\5"+
    "\1\0\1\5\1\0\3\5\2\0\2\5\1\0\1\5\4\0\2\5\4\0\1\10\2\0\1\10\6\5\1\10\3\0\1"+
    "\10\1\0\1\5\1\0\1\5\1\10\1\5\1\10\1\5\1\10\1\5\2\0\1\5\1\0\4\10\1\5\2\10\4"+
    "\0\1\7\2\0\2\10\2\0\2\7\2\0\2\3\2\0\3\10\1\5\1\3\3\0\3\5\4\3\1\5\1\0\1\7\1"+
    "\0\1\7\1\3\1\0\2\3\1\5\1\10\1\3\3\10\2\3\2\0\2\3\1\7\3\10\1\5\2\10\1\0\2\146"+
    "\4\0\1\10\1\0\1\10\2\0\1\5\1\116\5\10\1\7\4\10\1\7\2\10\1\3\3\7\2\3\1\10\1"+
    "\7\3\10\5\7\2\10\1\7\1\10\1\7\1\10\1\7\1\10\4\7\1\10\2\3\4\5\1\3\3\10\1\7"+
    "\4\3\4\10\1\3\1\10\4\63\3\5\1\7\1\130\1\10\1\127\1\10\1\125\1\10\1\123\1\10"+
    "\1\120\6\10\1\134\2\10\6\64\3\3\1\0\1\7\2\3\1\7\2\5\2\7\1\3\3\10\1\3\1\7\1"+
    "\3\1\5\2\3\1\0\1\3\1\0\1\3\2\0\2\10\1\0\1\10\1\0\2\5\1\10\1\7\1\3\2\5\2\10"+
    "\1\7\1\3\1\5\2\10\1\7\2\5\1\3\1\5\3\0\1\3\1\10\3\3\1\10\1\0\1\10\1\0\1\5\1"+
    "\10\4\0\1\7\2\0\2\7\1\0\1\7\1\0\2\3\1\7\1\0\1\7\3\0\3\7\1\10\3\3\1\10\2\3"+
    "\1\10\1\5\2\10\2\64\2\10");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\2\3\1\7\1\4\1\10\1\11\1\12\1\4\1\13"+
    "\1\14\1\15\1\16\14\4\1\7\1\17\1\20\1\21"+
    "\1\3\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\3\3\36\1\37"+
    "\1\40\1\41\2\37\2\0\1\42\2\0\1\43\2\0"+
    "\1\44\1\4\1\45\1\23\1\46\1\47\3\4\1\50"+
    "\7\4\1\51\1\52\7\4\2\0\1\21\1\24\1\22"+
    "\1\27\1\53\1\54\1\55\1\0\2\56\3\0\1\57"+
    "\14\0\2\60\20\0\2\61\1\0\1\62\1\0\1\4"+
    "\1\45\1\63\2\4\1\64\13\4\1\65\3\4\1\17"+
    "\1\27\2\7\2\56\4\0\1\56\6\0\1\40\17\0"+
    "\1\66\1\4\1\67\1\70\1\71\1\72\11\4\1\73"+
    "\2\4\4\0\2\4\1\74\2\4\1\75\1\76\3\4"+
    "\1\77\1\4\1\21\1\22\1\23\1\24\1\100\2\4"+
    "\1\17\1\101\1\102\1\4\1\103\1\104\1\105\1\106"+
    "\1\107\1\4\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\147\0\316\0\u0135\0\u019c\0\u0203\0\u026a\0\u02d1"+
    "\0\u02d1\0\u0338\0\u039f\0\u0406\0\u046d\0\u04d4\0\u053b\0\u05a2"+
    "\0\u0609\0\u0670\0\u06d7\0\u073e\0\u07a5\0\u019c\0\u046d\0\u080c"+
    "\0\u0873\0\u08da\0\u0941\0\u09a8\0\u0a0f\0\u0a76\0\u0add\0\u0b44"+
    "\0\u0bab\0\u0c12\0\u0c79\0\u0ce0\0\u0406\0\u0d47\0\u0406\0\u0dae"+
    "\0\u0406\0\u0406\0\u0406\0\u0e15\0\u019c\0\u0406\0\u0406\0\u019c"+
    "\0\u019c\0\u019c\0\u019c\0\u019c\0\u0e7c\0\u019c\0\u0ee3\0\u0f4a"+
    "\0\u0fb1\0\u019c\0\u1018\0\u019c\0\u107f\0\u10e6\0\u114d\0\u11b4"+
    "\0\u121b\0\u1282\0\u02d1\0\u12e9\0\u1350\0\u026a\0\u13b7\0\u141e"+
    "\0\u026a\0\u019c\0\u02d1\0\u1485\0\u14ec\0\u1553\0\u02d1\0\u15ba"+
    "\0\u1621\0\u1688\0\u16ef\0\u1756\0\u17bd\0\u1824\0\u188b\0\u02d1"+
    "\0\u18f2\0\u1959\0\u19c0\0\u1a27\0\u1a8e\0\u1af5\0\u1b5c\0\u1bc3"+
    "\0\u1c2a\0\u046d\0\u026a\0\u046d\0\u026a\0\u046d\0\u019c\0\u019c"+
    "\0\u1c91\0\u019c\0\u1cf8\0\u1d5f\0\u1dc6\0\u1e2d\0\u019c\0\u1e94"+
    "\0\u1efb\0\u1f62\0\u1fc9\0\u2030\0\u2097\0\u20fe\0\u2165\0\u21cc"+
    "\0\u2233\0\u229a\0\u2301\0\u019c\0\u10e6\0\u2368\0\u23cf\0\u2436"+
    "\0\u249d\0\u2504\0\u256b\0\u25d2\0\u2639\0\u26a0\0\u2707\0\u276e"+
    "\0\u27d5\0\u283c\0\u28a3\0\u290a\0\u2971\0\u29d8\0\u2a3f\0\u2aa6"+
    "\0\u019c\0\u2b0d\0\u2b74\0\u2bdb\0\u2c42\0\u2ca9\0\u2d10\0\u02d1"+
    "\0\u2d77\0\u2dde\0\u2e45\0\u2eac\0\u2f13\0\u2f7a\0\u2fe1\0\u3048"+
    "\0\u30af\0\u3116\0\u317d\0\u02d1\0\u31e4\0\u324b\0\u32b2\0\u019c"+
    "\0\u019c\0\u1bc3\0\u1c2a\0\u1d5f\0\u1dc6\0\u3319\0\u3380\0\u33e7"+
    "\0\u344e\0\u34b5\0\u351c\0\u3583\0\u35ea\0\u3651\0\u36b8\0\u371f"+
    "\0\u2301\0\u3786\0\u37ed\0\u3854\0\u38bb\0\u3922\0\u3989\0\u39f0"+
    "\0\u3a57\0\u3abe\0\u3b25\0\u3b8c\0\u3bf3\0\u3c5a\0\u3cc1\0\u3d28"+
    "\0\u02d1\0\u3d8f\0\u02d1\0\u02d1\0\u02d1\0\u02d1\0\u3df6\0\u3e5d"+
    "\0\u3ec4\0\u3f2b\0\u3f92\0\u3ff9\0\u4060\0\u40c7\0\u412e\0\u02d1"+
    "\0\u4195\0\u41fc\0\u4263\0\u42ca\0\u4331\0\u4398\0\u43ff\0\u4466"+
    "\0\u02d1\0\u44cd\0\u4534\0\u02d1\0\u459b\0\u4602\0\u4669\0\u46d0"+
    "\0\u02d1\0\u4737\0\u019c\0\u019c\0\u019c\0\u019c\0\u02d1\0\u479e"+
    "\0\u4805\0\u02d1\0\u02d1\0\u02d1\0\u486c\0\u02d1\0\u02d1\0\u02d1"+
    "\0\u02d1\0\u02d1\0\u48d3\0\u02d1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\10\1\13\1\10\1\13\1\17"+
    "\1\13\1\16\1\20\1\21\1\22\1\23\1\13\1\24"+
    "\1\15\1\7\1\10\22\13\4\16\1\13\1\15\1\5"+
    "\1\14\1\25\1\26\1\6\1\27\1\6\1\30\1\31"+
    "\1\32\2\10\1\33\1\34\1\35\1\10\1\36\1\10"+
    "\1\37\1\40\1\41\3\10\1\42\1\43\1\5\1\14"+
    "\1\44\1\45\1\46\1\15\1\47\1\50\1\51\1\16"+
    "\1\52\1\53\1\54\1\55\1\5\1\56\1\16\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\6\1\0"+
    "\27\66\1\67\35\66\1\70\61\66\22\71\1\72\1\73"+
    "\123\71\22\74\1\75\124\74\150\0\1\6\65\0\1\6"+
    "\1\0\1\6\53\0\1\6\3\0\1\7\6\0\1\7"+
    "\11\0\2\7\2\0\3\7\30\0\1\7\5\0\1\7"+
    "\30\0\2\7\1\0\1\7\4\0\1\7\12\0\1\7"+
    "\5\0\5\10\2\0\10\10\3\0\2\10\3\0\30\10"+
    "\1\0\1\10\6\0\24\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\11\0\23\76\1\77\45\76\1\0\53\76"+
    "\5\0\5\13\2\0\10\13\2\0\1\100\2\13\3\0"+
    "\30\13\1\0\1\13\6\0\24\13\1\0\1\13\6\0"+
    "\1\13\6\0\1\13\21\0\2\14\16\0\1\14\31\0"+
    "\1\14\1\0\1\14\3\0\1\14\25\0\1\14\1\0"+
    "\6\14\1\0\2\14\3\0\1\14\1\0\1\14\5\0"+
    "\1\14\4\0\1\7\5\0\1\14\1\15\11\0\2\7"+
    "\2\0\1\7\1\15\1\7\30\0\1\15\1\0\1\14"+
    "\3\0\1\15\25\0\1\14\1\0\1\14\2\15\1\14"+
    "\1\15\1\14\1\0\2\14\1\7\2\0\1\14\1\0"+
    "\1\14\5\0\1\15\6\0\1\16\5\0\1\16\6\0"+
    "\1\16\2\0\1\101\2\102\26\0\4\16\36\0\1\16"+
    "\6\0\1\16\6\0\1\16\14\0\5\10\2\0\10\10"+
    "\3\0\2\10\3\0\30\10\1\0\1\10\6\0\7\10"+
    "\1\103\14\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\33\0\1\104\126\0\1\7\6\0\1\7\11\0\2\7"+
    "\2\0\3\7\30\0\1\7\5\0\1\7\21\0\1\105"+
    "\6\0\2\7\1\0\1\7\4\0\1\7\12\0\1\7"+
    "\4\0\1\7\6\0\1\7\11\0\1\7\1\106\2\0"+
    "\3\7\30\0\1\7\5\0\1\7\30\0\2\7\1\0"+
    "\1\7\4\0\1\7\12\0\1\7\5\0\5\10\2\0"+
    "\10\10\3\0\2\10\3\0\30\10\1\0\1\10\6\0"+
    "\14\10\1\107\7\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\13\0\1\7\6\0\1\7\11\0\2\7\2\0"+
    "\1\110\2\7\30\0\1\7\5\0\1\7\30\0\1\7"+
    "\1\111\1\0\1\7\4\0\1\7\12\0\1\7\31\0"+
    "\1\112\122\0\5\10\2\0\5\10\1\113\2\10\3\0"+
    "\1\114\1\10\3\0\30\10\1\0\1\10\6\0\1\10"+
    "\1\115\22\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\14\0\5\10\2\0\10\10\3\0\2\10\3\0\30\10"+
    "\1\0\1\10\6\0\1\116\15\10\1\117\5\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\14\0\5\10\2\0"+
    "\10\10\3\0\2\10\3\0\30\10\1\0\1\10\6\0"+
    "\3\10\1\120\4\10\1\121\10\10\1\122\2\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\14\0\5\10\2\0"+
    "\10\10\3\0\1\123\1\10\3\0\30\10\1\0\1\10"+
    "\6\0\24\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\14\0\5\10\2\0\10\10\3\0\2\10\3\0\30\10"+
    "\1\0\1\10\6\0\21\10\1\124\2\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\14\0\5\10\2\0\5\10"+
    "\1\125\2\10\3\0\2\10\3\0\30\10\1\0\1\10"+
    "\6\0\1\10\1\126\22\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\10\10\3\0\2\10"+
    "\3\0\30\10\1\0\1\10\6\0\5\10\1\127\1\10"+
    "\1\130\3\10\1\131\10\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\5\10\1\132\2\10"+
    "\3\0\2\10\3\0\30\10\1\0\1\10\6\0\24\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\14\0\5\10"+
    "\2\0\10\10\3\0\1\133\1\10\3\0\30\10\1\0"+
    "\1\10\6\0\24\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\14\0\5\10\2\0\10\10\3\0\2\10\3\0"+
    "\30\10\1\0\1\10\6\0\1\10\1\134\12\10\1\135"+
    "\7\10\1\0\1\10\6\0\1\10\6\0\1\10\14\0"+
    "\5\10\2\0\10\10\3\0\2\10\3\0\30\10\1\0"+
    "\1\10\6\0\11\10\1\136\12\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\14\0\5\10\2\0\10\10\3\0"+
    "\2\10\3\0\30\10\1\0\1\10\6\0\23\10\1\137"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\15\0\1\16"+
    "\5\0\1\16\2\140\2\0\2\141\1\16\2\0\1\101"+
    "\2\102\26\0\4\16\36\0\1\16\6\0\1\16\6\0"+
    "\1\16\13\0\1\7\5\0\1\14\1\15\11\0\2\7"+
    "\2\0\1\7\1\15\1\7\30\0\1\15\1\0\1\14"+
    "\3\0\1\15\25\0\1\14\1\0\1\14\1\15\1\142"+
    "\1\14\1\15\1\14\1\0\2\14\1\7\2\0\1\14"+
    "\1\0\1\14\5\0\1\15\4\0\1\7\5\0\1\14"+
    "\1\15\11\0\2\7\2\0\1\143\1\15\1\7\30\0"+
    "\1\15\1\0\1\14\3\0\1\15\25\0\1\14\1\0"+
    "\1\14\1\144\1\15\1\14\1\15\1\14\1\0\2\14"+
    "\1\7\2\0\1\14\1\0\1\14\5\0\1\15\4\0"+
    "\1\7\6\0\1\7\11\0\2\7\2\0\3\7\30\0"+
    "\1\7\5\0\1\7\30\0\2\7\1\0\1\7\4\0"+
    "\1\145\12\0\1\7\4\0\1\7\5\0\1\14\1\15"+
    "\11\0\2\7\2\0\1\7\1\15\1\7\30\0\1\15"+
    "\1\0\1\14\3\0\1\15\25\0\1\14\1\0\1\14"+
    "\1\15\1\146\1\14\1\15\1\14\1\0\2\14\1\7"+
    "\2\0\1\14\1\0\1\14\5\0\1\15\70\0\1\147"+
    "\107\0\1\150\117\0\22\71\2\0\123\71\1\0\1\151"+
    "\4\0\1\152\3\0\1\153\1\154\3\0\1\155\1\0"+
    "\1\153\2\152\2\0\1\156\2\0\1\157\1\152\1\160"+
    "\1\161\1\162\1\0\1\163\1\164\1\162\1\165\1\166"+
    "\2\0\2\166\1\167\1\0\1\170\1\0\1\171\4\153"+
    "\1\0\1\172\4\0\1\151\1\0\1\151\1\0\2\152"+
    "\2\0\1\152\1\0\2\152\6\0\1\152\5\0\1\153"+
    "\6\0\1\153\6\0\1\153\7\0\1\151\23\0\1\173"+
    "\132\0\1\174\146\0\1\175\3\0\1\176\1\177\3\0"+
    "\1\200\1\0\1\176\2\76\2\0\1\201\3\0\1\76"+
    "\1\202\1\203\1\204\1\0\1\205\1\206\1\204\1\207"+
    "\1\210\2\0\2\210\1\211\1\0\1\212\1\0\1\213"+
    "\4\176\1\0\1\214\10\0\2\76\2\0\1\76\1\0"+
    "\2\76\6\0\1\76\5\0\1\176\6\0\1\176\6\0"+
    "\1\176\20\0\1\215\4\0\1\215\1\0\1\215\1\0"+
    "\1\215\5\0\1\215\4\0\22\215\4\0\1\215\77\0"+
    "\1\216\6\0\1\216\33\0\4\216\36\0\1\216\6\0"+
    "\1\216\6\0\1\216\23\0\1\217\6\0\1\217\5\0"+
    "\2\220\24\0\4\217\36\0\1\217\6\0\1\217\6\0"+
    "\1\217\33\0\1\221\202\0\1\222\73\0\5\10\2\0"+
    "\10\10\3\0\2\10\3\0\30\10\1\0\1\10\6\0"+
    "\16\10\1\223\5\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\11\0\67\224\1\110\1\225\1\0\55\224\3\0"+
    "\5\10\2\0\10\10\3\0\2\10\3\0\30\10\1\0"+
    "\1\10\6\0\10\10\1\226\13\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\14\0\5\10\2\0\10\10\3\0"+
    "\2\10\3\0\30\10\1\0\1\10\6\0\2\10\1\227"+
    "\21\10\1\0\1\10\6\0\1\10\6\0\1\10\14\0"+
    "\5\10\2\0\5\10\1\230\2\10\3\0\2\10\3\0"+
    "\30\10\1\0\1\10\6\0\24\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\14\0\5\10\2\0\10\10\3\0"+
    "\2\10\3\0\30\10\1\0\1\10\6\0\4\10\1\231"+
    "\17\10\1\0\1\10\6\0\1\10\6\0\1\10\14\0"+
    "\5\10\2\0\10\10\3\0\2\10\3\0\30\10\1\0"+
    "\1\10\6\0\20\10\1\232\3\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\14\0\5\10\2\0\10\10\3\0"+
    "\1\233\1\10\3\0\30\10\1\0\1\10\6\0\24\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\14\0\5\10"+
    "\2\0\10\10\3\0\2\10\3\0\30\10\1\0\1\10"+
    "\6\0\6\10\1\234\15\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\10\10\3\0\1\235"+
    "\1\10\3\0\30\10\1\0\1\10\6\0\24\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\14\0\5\10\2\0"+
    "\10\10\3\0\2\10\3\0\30\10\1\0\1\10\6\0"+
    "\10\10\1\236\13\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\14\0\5\10\2\0\10\10\3\0\2\10\3\0"+
    "\30\10\1\0\1\10\6\0\14\10\1\237\7\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\14\0\5\10\2\0"+
    "\10\10\3\0\2\10\3\0\30\10\1\0\1\10\6\0"+
    "\7\10\1\240\6\10\1\241\5\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\14\0\5\10\2\0\10\10\3\0"+
    "\2\10\3\0\30\10\1\0\1\10\6\0\4\10\1\242"+
    "\17\10\1\0\1\10\6\0\1\10\6\0\1\10\14\0"+
    "\5\10\2\0\10\10\3\0\2\10\3\0\30\10\1\0"+
    "\1\10\6\0\1\243\23\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\10\10\3\0\2\10"+
    "\3\0\30\10\1\0\1\10\6\0\2\10\1\244\21\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\14\0\5\10"+
    "\2\0\10\10\3\0\2\10\3\0\30\10\1\0\1\10"+
    "\6\0\16\10\1\245\5\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\10\10\3\0\2\10"+
    "\3\0\30\10\1\0\1\10\6\0\1\10\1\246\22\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\14\0\5\10"+
    "\2\0\10\10\3\0\2\10\3\0\30\10\1\0\1\10"+
    "\6\0\1\247\23\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\14\0\5\10\2\0\10\10\3\0\2\10\3\0"+
    "\30\10\1\0\1\10\6\0\24\10\1\250\1\10\6\0"+
    "\1\10\4\0\1\251\1\0\1\10\23\0\10\252\3\0"+
    "\2\252\3\0\30\252\10\0\22\252\3\0\1\252\6\0"+
    "\1\252\6\0\1\252\32\0\1\253\33\0\4\253\36\0"+
    "\1\253\15\0\1\253\12\0\1\151\21\0\1\157\43\0"+
    "\1\151\1\0\1\151\53\0\1\151\5\0\1\153\5\0"+
    "\1\153\6\0\1\153\33\0\4\153\36\0\1\153\6\0"+
    "\1\153\6\0\1\153\23\0\10\254\3\0\2\254\3\0"+
    "\30\254\10\0\22\254\3\0\1\254\6\0\1\254\6\0"+
    "\1\254\32\0\1\255\33\0\4\255\36\0\1\255\15\0"+
    "\1\255\31\0\1\162\13\0\1\256\1\0\1\257\6\0"+
    "\1\152\2\0\1\260\124\0\1\261\5\0\1\152\132\0"+
    "\1\262\15\0\1\263\5\0\1\152\2\0\1\264\11\0"+
    "\1\265\123\0\1\152\150\0\1\152\142\0\1\152\3\0"+
    "\1\152\151\0\1\152\6\0\1\265\130\0\1\152\161\0"+
    "\1\261\2\0\1\266\136\0\1\266\132\0\1\261\10\0"+
    "\1\267\2\0\1\270\113\0\1\152\4\0\1\152\1\0"+
    "\1\152\1\0\1\152\5\0\1\152\4\0\22\152\4\0"+
    "\1\152\1\0\2\152\104\0\1\271\130\0\1\176\1\0"+
    "\1\174\3\0\1\176\6\0\1\176\33\0\4\176\36\0"+
    "\1\176\6\0\1\176\6\0\1\176\23\0\10\272\3\0"+
    "\2\272\3\0\30\272\10\0\22\272\3\0\1\272\6\0"+
    "\1\272\6\0\1\272\32\0\1\273\33\0\4\273\36\0"+
    "\1\273\15\0\1\273\31\0\1\204\13\0\1\274\1\0"+
    "\1\275\6\0\1\76\2\0\1\276\124\0\1\277\5\0"+
    "\1\76\132\0\1\300\15\0\1\301\5\0\1\76\2\0"+
    "\1\302\11\0\1\303\123\0\1\76\150\0\1\76\142\0"+
    "\1\76\3\0\1\76\151\0\1\76\6\0\1\303\130\0"+
    "\1\76\161\0\1\277\2\0\1\304\136\0\1\304\132\0"+
    "\1\277\10\0\1\305\2\0\1\306\113\0\1\76\4\0"+
    "\1\76\1\0\1\76\1\0\1\76\5\0\1\76\4\0"+
    "\22\76\4\0\1\76\1\0\2\76\65\0\5\215\2\0"+
    "\10\215\2\0\1\100\2\215\3\0\30\215\1\0\1\215"+
    "\6\0\24\215\1\0\1\215\6\0\1\215\6\0\1\215"+
    "\15\0\1\216\5\0\1\216\6\0\1\216\3\0\2\102"+
    "\26\0\4\216\36\0\1\216\6\0\1\216\6\0\1\216"+
    "\15\0\1\217\5\0\1\217\6\0\1\217\33\0\4\217"+
    "\36\0\1\217\6\0\1\217\6\0\1\217\23\0\1\217"+
    "\6\0\1\217\33\0\4\217\36\0\1\217\6\0\1\217"+
    "\6\0\1\217\66\0\1\307\1\310\73\0\5\10\2\0"+
    "\10\10\3\0\1\311\1\10\3\0\30\10\1\0\1\10"+
    "\6\0\24\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\11\0\71\224\1\0\55\224\71\225\1\0\55\225\3\0"+
    "\5\10\2\0\10\10\3\0\2\10\3\0\30\10\1\0"+
    "\1\10\6\0\11\10\1\312\12\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\14\0\5\10\2\0\10\10\3\0"+
    "\2\10\3\0\30\10\1\0\1\10\6\0\1\10\1\313"+
    "\22\10\1\0\1\10\6\0\1\10\6\0\1\10\14\0"+
    "\5\10\2\0\10\10\3\0\1\314\1\10\3\0\30\10"+
    "\1\0\1\10\6\0\24\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\10\10\3\0\1\315"+
    "\1\10\3\0\30\10\1\0\1\10\6\0\24\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\14\0\5\10\2\0"+
    "\10\10\3\0\2\10\3\0\30\10\1\0\1\10\6\0"+
    "\5\10\1\316\16\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\14\0\5\10\2\0\10\10\3\0\2\10\3\0"+
    "\30\10\1\0\1\10\6\0\2\10\1\317\21\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\14\0\5\10\2\0"+
    "\10\10\3\0\2\10\3\0\30\10\1\0\1\10\6\0"+
    "\10\10\1\320\13\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\14\0\5\10\2\0\10\10\3\0\1\321\1\10"+
    "\3\0\30\10\1\0\1\10\6\0\1\10\1\322\22\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\14\0\5\10"+
    "\2\0\10\10\3\0\2\10\3\0\30\10\1\0\1\10"+
    "\6\0\16\10\1\323\5\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\10\10\3\0\2\10"+
    "\3\0\30\10\1\0\1\10\6\0\11\10\1\324\12\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\14\0\5\10"+
    "\2\0\10\10\3\0\2\10\3\0\30\10\1\0\1\10"+
    "\6\0\2\10\1\325\21\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\5\10\1\326\2\10"+
    "\3\0\2\10\3\0\30\10\1\0\1\10\6\0\24\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\14\0\5\10"+
    "\2\0\10\10\3\0\2\10\3\0\30\10\1\0\1\10"+
    "\6\0\20\10\1\327\3\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\10\10\3\0\1\330"+
    "\1\10\3\0\30\10\1\0\1\10\6\0\24\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\14\0\5\10\2\0"+
    "\10\10\3\0\2\10\3\0\30\10\1\0\1\10\6\0"+
    "\16\10\1\331\5\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\14\0\5\10\2\0\10\10\3\0\2\10\3\0"+
    "\30\10\1\0\1\10\6\0\11\10\1\332\12\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\53\0\1\152\120\0"+
    "\1\152\16\0\1\152\164\0\1\152\134\0\1\152\144\0"+
    "\1\152\125\0\1\152\165\0\1\152\163\0\1\152\151\0"+
    "\1\152\121\0\1\152\175\0\4\152\74\0\1\174\3\0"+
    "\10\272\3\0\2\272\3\0\30\272\10\0\22\272\3\0"+
    "\1\272\6\0\1\272\6\0\1\272\17\0\1\174\12\0"+
    "\1\273\33\0\4\273\36\0\1\273\15\0\1\273\53\0"+
    "\1\76\120\0\1\76\16\0\1\76\164\0\1\76\134\0"+
    "\1\76\115\0\1\174\26\0\1\76\125\0\1\76\165\0"+
    "\1\76\163\0\1\76\151\0\1\76\121\0\1\76\175\0"+
    "\4\76\142\0\1\333\51\0\1\334\77\0\1\335\37\0"+
    "\1\336\32\0\5\10\2\0\10\10\3\0\2\10\3\0"+
    "\30\10\1\0\1\10\6\0\17\10\1\337\4\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\14\0\5\10\2\0"+
    "\10\10\3\0\2\10\3\0\30\10\1\0\1\10\6\0"+
    "\3\10\1\340\20\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\14\0\5\10\2\0\10\10\3\0\1\341\1\10"+
    "\3\0\30\10\1\0\1\10\6\0\24\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\14\0\5\10\2\0\10\10"+
    "\3\0\2\10\3\0\30\10\1\0\1\10\6\0\11\10"+
    "\1\342\12\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\14\0\5\10\2\0\10\10\3\0\2\10\3\0\30\10"+
    "\1\0\1\10\6\0\14\10\1\343\7\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\14\0\5\10\2\0\10\10"+
    "\3\0\1\344\1\10\3\0\30\10\1\0\1\10\6\0"+
    "\24\10\1\0\1\10\6\0\1\10\6\0\1\10\14\0"+
    "\5\10\2\0\1\10\1\345\6\10\3\0\2\10\3\0"+
    "\30\10\1\0\1\10\6\0\24\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\14\0\5\10\2\0\10\10\3\0"+
    "\2\10\3\0\30\10\1\0\1\10\6\0\1\10\1\346"+
    "\22\10\1\0\1\10\6\0\1\10\6\0\1\10\14\0"+
    "\5\10\2\0\10\10\3\0\2\10\3\0\30\10\1\0"+
    "\1\10\6\0\10\10\1\347\13\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\14\0\5\10\2\0\10\10\3\0"+
    "\2\10\3\0\30\10\1\0\1\10\6\0\14\10\1\350"+
    "\7\10\1\0\1\10\6\0\1\10\6\0\1\10\14\0"+
    "\5\10\2\0\10\10\3\0\2\10\3\0\30\10\1\0"+
    "\1\10\6\0\16\10\1\351\5\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\14\0\5\10\2\0\10\10\3\0"+
    "\2\10\3\0\30\10\1\0\1\10\6\0\5\10\1\352"+
    "\16\10\1\0\1\10\6\0\1\10\6\0\1\10\67\0"+
    "\1\353\40\0\1\354\105\0\1\355\40\0\1\356\164\0"+
    "\1\251\130\0\1\250\32\0\5\10\2\0\10\10\3\0"+
    "\1\357\1\10\3\0\30\10\1\0\1\10\6\0\24\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\14\0\5\10"+
    "\2\0\10\10\3\0\2\10\3\0\30\10\1\0\1\10"+
    "\6\0\4\10\1\360\17\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\10\10\3\0\2\10"+
    "\3\0\30\10\1\0\1\10\6\0\12\10\1\361\11\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\14\0\5\10"+
    "\2\0\10\10\3\0\2\10\3\0\30\10\1\0\1\10"+
    "\6\0\14\10\1\362\7\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\10\10\3\0\2\10"+
    "\3\0\30\10\1\0\1\10\6\0\10\10\1\363\3\10"+
    "\1\364\7\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\14\0\5\10\2\0\10\10\3\0\2\10\3\0\30\10"+
    "\1\0\1\10\6\0\5\10\1\365\16\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\14\0\5\10\2\0\10\10"+
    "\3\0\2\10\3\0\30\10\1\0\1\10\6\0\2\10"+
    "\1\366\21\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\14\0\5\10\2\0\10\10\3\0\1\367\1\10\3\0"+
    "\30\10\1\0\1\10\6\0\24\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\14\0\5\10\2\0\10\10\3\0"+
    "\2\10\3\0\30\10\1\0\1\10\6\0\12\10\1\370"+
    "\11\10\1\0\1\10\6\0\1\10\6\0\1\10\14\0"+
    "\5\10\2\0\10\10\3\0\1\371\1\10\3\0\30\10"+
    "\1\0\1\10\6\0\24\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\10\10\3\0\2\10"+
    "\3\0\30\10\1\0\1\10\6\0\5\10\1\372\16\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\14\0\5\10"+
    "\2\0\10\10\3\0\2\10\3\0\30\10\1\0\1\10"+
    "\6\0\15\10\1\373\6\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\14\0\5\10\2\0\10\10\3\0\1\374"+
    "\1\10\3\0\30\10\1\0\1\10\6\0\24\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18746];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\20\1\1\11\26\1\1\11\2\1\5\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\4\1\1\11\25\1\2\0"+
    "\5\1\2\11\1\0\1\11\1\1\3\0\1\11\14\0"+
    "\1\11\1\1\20\0\2\1\1\0\1\11\1\0\25\1"+
    "\2\11\4\1\4\0\1\1\6\0\1\1\17\0\22\1"+
    "\4\0\14\1\4\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private final java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   int comment_nesting = 0;
   int yyline = 0;
   int yycolumn = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _PSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;


    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 73: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 3: 
            { return OPERATOR;
            } 
            // fall through
          case 75: break;
          case 4: 
            { return LOWER;
            } 
            // fall through
          case 76: break;
          case 5: 
            { return WILDCARD;
            } 
            // fall through
          case 77: break;
          case 6: 
            { return PROPER_NAME;
            } 
            // fall through
          case 78: break;
          case 7: 
            { return NATURAL;
            } 
            // fall through
          case 79: break;
          case 8: 
            { yybegin(STRINGS); return STRING;
            } 
            // fall through
          case 80: break;
          case 9: 
            { return BACKSLASH;
            } 
            // fall through
          case 81: break;
          case 10: 
            { return DOT;
            } 
            // fall through
          case 82: break;
          case 11: 
            { return MINUS;
            } 
            // fall through
          case 83: break;
          case 12: 
            { return LCURLY;
            } 
            // fall through
          case 84: break;
          case 13: 
            { return RCURLY;
            } 
            // fall through
          case 85: break;
          case 14: 
            { return PIPE;
            } 
            // fall through
          case 86: break;
          case 15: 
            { return FORALL;
            } 
            // fall through
          case 87: break;
          case 16: 
            { return EQ;
            } 
            // fall through
          case 88: break;
          case 17: 
            { return DARROW;
            } 
            // fall through
          case 89: break;
          case 18: 
            { return LDARROW;
            } 
            // fall through
          case 90: break;
          case 19: 
            { return ARROW;
            } 
            // fall through
          case 91: break;
          case 20: 
            { return LARROW;
            } 
            // fall through
          case 92: break;
          case 21: 
            { return COLON;
            } 
            // fall through
          case 93: break;
          case 22: 
            { return SEMI;
            } 
            // fall through
          case 94: break;
          case 23: 
            { return DCOLON;
            } 
            // fall through
          case 95: break;
          case 24: 
            { return TICK;
            } 
            // fall through
          case 96: break;
          case 25: 
            { return COMMA;
            } 
            // fall through
          case 97: break;
          case 26: 
            { return LPAREN;
            } 
            // fall through
          case 98: break;
          case 27: 
            { return RPAREN;
            } 
            // fall through
          case 99: break;
          case 28: 
            { return LBRACK;
            } 
            // fall through
          case 100: break;
          case 29: 
            { return RBRACK;
            } 
            // fall through
          case 101: break;
          case 30: 
            { return MLCOMMENT;
            } 
            // fall through
          case 102: break;
          case 31: 
            { return STRING;
            } 
            // fall through
          case 103: break;
          case 32: 
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 104: break;
          case 33: 
            { return STRING_ERROR;
            } 
            // fall through
          case 105: break;
          case 34: 
            { return MODULE_PREFIX;
            } 
            // fall through
          case 106: break;
          case 35: 
            { return OF;
            } 
            // fall through
          case 107: break;
          case 36: 
            { return DDOT;
            } 
            // fall through
          case 108: break;
          case 37: 
            { return SLCOMMENT;
            } 
            // fall through
          case 109: break;
          case 38: 
            { yybegin(COMMENT); comment_nesting = 1; return MLCOMMENT;
            } 
            // fall through
          case 110: break;
          case 39: 
            { return DO;
            } 
            // fall through
          case 111: break;
          case 40: 
            { return AS;
            } 
            // fall through
          case 112: break;
          case 41: 
            { return IN;
            } 
            // fall through
          case 113: break;
          case 42: 
            { return IF;
            } 
            // fall through
          case 114: break;
          case 43: 
            { return OPTIMISTIC;
            } 
            // fall through
          case 115: break;
          case 44: 
            { comment_nesting--; if (comment_nesting == 0) yybegin(YYINITIAL); return MLCOMMENT;
            } 
            // fall through
          case 116: break;
          case 45: 
            { comment_nesting++; return MLCOMMENT;
            } 
            // fall through
          case 117: break;
          case 46: 
            { return STRING_ESCAPED;
            } 
            // fall through
          case 118: break;
          case 47: 
            { return STRING_GAP;
            } 
            // fall through
          case 119: break;
          case 48: 
            { return CHAR;
            } 
            // fall through
          case 120: break;
          case 49: 
            { return FLOAT;
            } 
            // fall through
          case 121: break;
          case 50: 
            { yybegin(BLOCK_STRINGS); return STRING;
            } 
            // fall through
          case 122: break;
          case 51: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 123: break;
          case 52: 
            { return ADO;
            } 
            // fall through
          case 124: break;
          case 53: 
            { return LET;
            } 
            // fall through
          case 125: break;
          case 54: 
            { return ELSE;
            } 
            // fall through
          case 126: break;
          case 55: 
            { return DATA;
            } 
            // fall through
          case 127: break;
          case 56: 
            { return TYPE;
            } 
            // fall through
          case 128: break;
          case 57: 
            { return TRUE;
            } 
            // fall through
          case 129: break;
          case 58: 
            { return THEN;
            } 
            // fall through
          case 130: break;
          case 59: 
            { return CASE;
            } 
            // fall through
          case 131: break;
          case 60: 
            { return WHERE;
            } 
            // fall through
          case 132: break;
          case 61: 
            { return FALSE;
            } 
            // fall through
          case 133: break;
          case 62: 
            { return INFIX;
            } 
            // fall through
          case 134: break;
          case 63: 
            { return CLASS;
            } 
            // fall through
          case 135: break;
          case 64: 
            { return DERIVE;
            } 
            // fall through
          case 136: break;
          case 65: 
            { return INFIXR;
            } 
            // fall through
          case 137: break;
          case 66: 
            { return INFIXL;
            } 
            // fall through
          case 138: break;
          case 67: 
            { return IMPORT;
            } 
            // fall through
          case 139: break;
          case 68: 
            { return MODULE;
            } 
            // fall through
          case 140: break;
          case 69: 
            { return HIDING;
            } 
            // fall through
          case 141: break;
          case 70: 
            { return NEWTYPE;
            } 
            // fall through
          case 142: break;
          case 71: 
            { return FOREIGN;
            } 
            // fall through
          case 143: break;
          case 72: 
            { return INSTANCE;
            } 
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
