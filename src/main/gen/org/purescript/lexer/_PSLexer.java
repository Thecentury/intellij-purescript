/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package org.purescript.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static org.purescript.parser.PSTokensKt.*;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.psi.TokenType.BAD_CHARACTER;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>C:/Users/neppord/code/intellij-purescript/src/main/grammar/Purescript.flex</tt>
 */
class _PSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRINGS = 4;
  public static final int BLOCK_STRINGS = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 25688 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\1\23\1\24\1\21\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\44\1\45\1\44\1\46\1\44\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\44\31\21\1\57\121\21\1\60\4\21\1\61\1\21\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\53\21\1\70\41\71\1\21\1\72\1\73\1\21\1\74\1\75\1\76\1"+
    "\77\1\100\1\101\1\102\1\103\1\104\1\21\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\3\71\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\71\1\124\1\71"+
    "\1\125\3\71\3\21\1\126\1\127\1\130\12\71\4\21\1\131\17\71\2\21\1\132\41\71"+
    "\2\21\1\133\1\134\3\71\1\135\27\21\1\136\2\21\1\137\45\71\1\140\13\71\1\141"+
    "\23\71\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151\2\44\1\152\15\71\1"+
    "\153\1\154\4\71\1\155\1\71\1\156\1\157\1\160\3\44\1\161\1\162\1\163\1\164"+
    "\6\71\246\21\1\165\20\21\1\166\1\167\25\21\1\170\51\71\2\21\1\171\u0e05\71");

  /* The ZZ_CMAP_Y table has 7808 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\4\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\0\1\33\6\0\1"+
    "\34\1\35\1\36\1\37\1\40\1\41\1\42\1\0\5\43\1\44\1\43\1\45\1\46\4\47\1\50\2"+
    "\47\16\51\4\52\1\53\13\51\1\54\1\55\1\56\1\57\1\60\1\61\1\54\1\57\1\62\1\54"+
    "\1\51\1\57\1\55\1\57\1\60\1\52\1\63\1\62\1\64\1\65\1\66\4\52\1\53\4\51\1\67"+
    "\1\57\17\51\1\47\1\61\1\56\1\52\1\45\2\51\21\47\1\70\10\47\1\71\1\64\1\72"+
    "\1\73\2\64\1\74\3\75\1\47\1\76\1\75\1\77\4\75\21\0\1\100\12\0\1\51\1\101\1"+
    "\102\1\103\1\0\1\104\1\105\1\106\1\60\3\43\1\107\2\43\10\47\1\110\1\61\1\62"+
    "\6\51\1\47\1\111\1\56\1\60\14\43\14\47\10\51\1\112\1\0\1\113\15\51\1\54\2"+
    "\52\1\55\30\51\1\114\10\43\1\105\1\115\1\0\1\116\11\47\1\0\1\117\20\0\6\64"+
    "\1\120\1\0\1\120\4\0\1\34\1\121\1\34\4\0\12\64\1\120\5\0\2\64\1\122\1\123"+
    "\1\124\30\64\1\115\1\0\1\125\1\0\1\126\1\127\1\123\3\64\1\130\4\0\1\131\7"+
    "\64\7\0\1\124\25\64\1\122\2\0\1\115\3\0\12\64\1\120\2\0\1\132\1\133\1\0\5"+
    "\64\1\122\1\133\2\0\2\134\5\0\6\64\1\134\21\0\5\64\1\131\1\64\1\122\21\0\15"+
    "\64\1\122\1\115\4\0\1\134\1\0\2\64\1\122\1\123\2\64\1\124\3\64\1\134\1\124"+
    "\1\64\2\135\5\64\1\131\1\64\1\136\1\123\1\122\1\115\3\0\1\133\3\0\1\137\1"+
    "\122\1\123\2\64\1\74\1\0\1\34\2\0\1\124\1\120\1\140\1\135\5\64\1\131\1\64"+
    "\1\131\1\126\1\122\7\0\1\124\1\136\1\0\1\123\2\64\1\123\1\134\3\0\1\124\1"+
    "\64\2\137\5\64\1\131\1\64\1\131\1\124\1\122\1\115\4\0\1\134\3\0\1\122\1\123"+
    "\2\64\1\127\1\0\1\115\2\0\1\124\1\64\2\135\5\64\1\131\1\64\1\131\1\124\1\122"+
    "\1\115\7\0\1\137\1\122\1\123\2\64\1\141\3\0\1\140\1\124\1\120\1\123\1\131"+
    "\1\122\1\126\1\131\1\140\1\134\1\120\1\123\2\64\1\122\5\0\1\134\4\0\1\123"+
    "\2\64\1\142\1\75\1\35\2\0\1\124\1\64\2\131\5\64\1\131\3\64\1\122\1\115\6\0"+
    "\1\120\1\0\1\122\1\123\2\64\3\0\1\142\1\134\1\124\1\64\2\131\5\64\1\131\2"+
    "\64\1\124\1\122\1\115\7\0\1\133\1\122\1\123\2\64\1\126\4\0\1\124\1\64\2\131"+
    "\11\64\1\120\1\115\3\0\1\143\1\0\1\120\1\0\1\140\1\122\1\123\2\64\2\0\1\144"+
    "\1\64\1\0\1\124\3\64\1\120\1\123\5\64\1\137\2\64\1\115\1\64\1\120\7\0\1\123"+
    "\2\64\4\0\1\124\13\64\1\131\2\0\1\142\1\64\1\120\2\0\2\64\1\122\11\0\1\126"+
    "\1\135\1\136\1\115\1\0\1\64\1\124\1\64\1\124\1\145\1\123\1\124\1\131\2\0\1"+
    "\115\1\64\1\136\2\0\2\64\1\122\1\64\10\0\1\146\3\0\1\142\1\117\1\34\1\75\2"+
    "\64\1\122\2\0\1\147\1\150\1\0\2\64\1\124\10\64\1\134\6\0\1\64\1\134\13\0\1"+
    "\34\1\75\1\151\1\75\1\37\1\0\1\117\1\150\11\0\12\64\1\120\4\0\1\140\2\64\1"+
    "\122\1\0\1\64\1\122\1\123\1\122\1\115\1\126\1\0\1\123\1\134\1\124\2\64\1\122"+
    "\2\0\1\133\2\64\1\122\1\34\11\43\1\107\1\0\1\152\12\64\1\120\123\64\1\131"+
    "\1\122\1\64\1\120\1\131\1\122\12\64\1\131\1\122\10\64\1\131\1\122\1\64\1\120"+
    "\1\131\1\122\3\64\1\120\16\64\1\131\1\122\20\64\1\120\11\0\4\64\2\75\1\40"+
    "\1\0\25\43\1\153\1\47\1\154\1\124\132\64\1\135\4\64\1\124\5\64\1\120\1\0\22"+
    "\64\1\120\1\0\1\124\1\64\1\134\1\0\3\64\1\131\1\122\3\0\4\64\1\122\3\0\4\64"+
    "\1\122\3\0\3\64\1\131\1\134\3\0\15\64\10\0\1\140\1\142\1\134\2\64\1\122\11"+
    "\0\2\64\1\122\1\0\26\64\2\0\1\64\1\135\10\64\1\136\1\0\21\64\1\122\2\0\7\64"+
    "\1\120\10\0\1\150\1\123\11\64\1\122\1\64\1\134\2\0\13\64\1\0\6\64\1\122\1"+
    "\0\2\64\1\122\1\34\10\75\5\64\1\120\2\0\15\64\1\134\12\0\2\64\1\122\1\0\2"+
    "\64\1\122\2\0\1\140\27\0\1\124\13\64\4\0\1\124\1\64\1\0\2\64\1\122\1\0\1\117"+
    "\1\75\1\35\2\0\2\75\1\150\1\140\7\64\1\134\2\0\1\123\15\64\1\122\6\0\11\64"+
    "\7\0\2\64\1\122\1\124\13\64\1\122\2\47\1\155\27\0\1\124\1\131\1\122\1\126"+
    "\2\0\60\47\20\0\45\51\1\62\1\47\1\53\30\51\2\47\2\43\1\47\1\154\1\43\1\153"+
    "\2\47\2\43\2\47\2\43\1\47\1\154\1\43\1\153\2\47\2\156\2\47\2\43\3\47\1\154"+
    "\2\47\2\64\2\47\2\64\2\47\2\64\1\47\1\157\1\43\1\160\1\161\1\157\1\43\1\146"+
    "\1\47\1\102\1\43\1\117\2\47\1\43\1\162\1\102\1\157\1\43\1\163\12\0\1\164\6"+
    "\0\1\150\2\0\1\125\7\0\1\165\1\0\1\34\1\166\2\0\1\34\1\150\3\47\1\155\3\75"+
    "\1\167\3\75\1\35\20\0\1\170\1\171\1\172\1\173\1\45\1\174\1\175\1\176\1\75"+
    "\1\177\1\200\1\201\1\43\1\71\1\202\1\61\1\75\1\203\1\72\1\204\4\0\4\205\4"+
    "\206\1\207\1\155\1\34\1\0\1\210\17\75\1\211\13\75\1\212\14\75\1\213\64\75"+
    "\1\0\7\75\1\121\64\75\1\35\11\75\1\35\6\0\2\75\1\35\24\0\6\75\1\214\6\215"+
    "\6\216\1\217\5\0\132\75\13\0\14\75\1\121\7\75\1\40\2\0\44\75\1\35\5\0\1\117"+
    "\17\75\1\0\10\75\1\34\35\75\1\34\7\75\1\40\10\75\1\40\1\117\2\75\1\37\1\75"+
    "\1\40\6\0\1\75\4\0\13\43\1\105\13\47\1\220\1\57\1\221\1\52\1\60\1\51\1\55"+
    "\1\47\1\61\31\51\1\76\1\171\1\222\1\113\3\0\11\47\1\223\1\0\1\165\16\64\1"+
    "\0\1\140\4\0\5\64\1\120\2\0\1\64\1\120\1\64\1\120\1\64\1\120\1\64\1\120\1"+
    "\64\1\120\1\64\1\120\1\64\1\120\1\64\1\120\23\0\1\140\24\0\6\75\1\151\26\75"+
    "\3\0\65\75\1\40\6\0\3\75\2\0\1\224\2\0\1\34\3\0\1\150\3\0\1\124\1\74\1\140"+
    "\1\225\1\124\24\64\1\120\1\142\1\226\1\124\25\64\1\120\1\64\1\0\1\124\11\64"+
    "\1\122\1\124\26\64\1\120\1\40\1\34\2\75\6\64\1\120\1\0\11\75\3\0\4\64\7\75"+
    "\1\35\2\0\1\34\7\75\2\0\1\150\3\0\10\75\2\0\1\34\11\75\1\150\3\0\17\75\1\35"+
    "\55\64\1\122\2\0\20\75\65\64\1\122\12\0\43\64\1\134\15\75\1\35\2\0\13\64\1"+
    "\122\3\64\1\134\7\64\5\0\13\51\1\227\3\0\1\140\7\51\1\154\21\64\1\122\6\0"+
    "\5\75\1\230\2\64\1\231\3\51\1\53\17\51\2\47\1\52\1\56\2\51\1\232\1\233\1\51"+
    "\1\53\4\51\1\57\1\105\1\43\1\51\17\0\1\140\1\234\1\64\2\137\1\120\5\64\1\120"+
    "\1\0\1\75\2\0\1\34\1\40\1\0\15\64\3\0\1\123\14\64\7\0\2\64\1\122\5\0\1\123"+
    "\1\64\1\140\1\115\11\64\1\122\2\0\5\64\1\120\6\0\7\64\1\134\1\0\13\64\1\120"+
    "\6\0\1\140\2\64\1\122\1\0\1\64\1\131\5\64\1\120\12\64\1\134\5\0\1\120\2\64"+
    "\1\0\2\64\1\122\1\0\5\64\1\235\1\236\1\123\14\64\1\115\1\126\1\124\1\122\1"+
    "\136\5\0\1\140\1\122\2\64\1\120\1\0\1\123\1\134\2\0\1\124\1\120\1\124\1\120"+
    "\1\124\1\120\2\0\1\64\1\120\1\64\1\120\12\47\1\50\2\47\1\154\2\0\24\47\10"+
    "\64\1\120\3\0\2\64\1\122\1\0\51\64\3\0\5\64\1\120\1\140\14\64\101\0\33\64"+
    "\1\122\32\64\1\122\11\0\1\47\1\220\2\0\1\237\1\47\1\0\1\145\2\64\1\240\2\64"+
    "\1\120\1\64\1\136\1\137\1\131\32\64\1\74\3\75\1\40\3\0\1\140\32\64\1\122\4"+
    "\0\20\64\1\123\15\64\12\0\3\64\1\40\30\0\1\125\1\35\1\127\1\0\1\64\1\131\41"+
    "\64\1\134\1\0\1\150\1\142\1\0\2\64\1\122\1\35\1\114\5\43\1\105\1\125\1\241"+
    "\5\47\1\220\1\147\1\0\1\123\25\64\1\120\1\123\1\64\1\123\1\64\1\123\1\64\1"+
    "\123\1\134\1\75\1\35\1\75\1\35\3\0\1\40\3\64\1\124\5\64\1\120\4\64\1\120\1"+
    "\137\3\64\1\122\3\64\1\122\10\0\36\64\1\120\16\0\1\142\2\75\16\0\1\117\3\75"+
    "\1\40\1\35\3\75\1\0\1\150\13\0\13\75\1\150\40\0\7\64\1\134\14\64\1\134\13"+
    "\0\10\64\4\0\4\64\1\131\1\64\1\122\1\0\11\64\1\122\2\0\7\64\1\122\11\64\1"+
    "\0\2\64\14\0\12\43\12\47\23\64\1\122\2\64\1\122\1\0\11\43\1\0\11\47\1\0\12"+
    "\64\2\0\15\64\47\0\15\64\1\120\2\0\5\64\1\122\2\0\2\64\46\0\1\64\1\122\1\131"+
    "\12\64\1\137\1\134\1\135\5\64\1\122\2\0\5\64\1\235\1\150\1\0\7\64\1\120\20"+
    "\0\4\64\1\120\1\122\2\0\5\64\1\122\2\0\6\64\1\122\21\0\16\64\1\0\1\123\20"+
    "\0\1\134\3\0\1\64\2\124\6\64\13\0\7\64\1\134\7\64\1\134\10\0\2\64\1\226\6"+
    "\64\1\134\6\0\15\64\1\122\2\0\5\64\1\122\2\0\4\64\1\120\3\0\4\64\1\122\33"+
    "\0\22\64\1\134\15\0\14\43\1\105\3\0\14\47\1\220\3\0\1\140\15\64\13\0\1\123"+
    "\2\64\4\0\1\140\13\64\10\0\6\64\1\134\1\0\2\64\1\122\1\0\1\140\10\64\1\120"+
    "\3\0\1\123\2\64\4\0\10\64\1\120\1\133\2\0\1\140\13\64\1\120\3\0\1\124\1\134"+
    "\2\0\2\64\1\120\1\134\10\0\4\64\1\137\6\64\25\0\1\64\1\120\1\131\1\137\3\64"+
    "\1\137\2\64\1\134\1\0\13\64\1\120\4\0\2\64\1\122\2\0\1\124\1\64\2\135\5\64"+
    "\1\131\1\64\1\131\1\124\1\122\1\115\4\0\1\134\2\0\1\124\1\122\47\0\15\64\1"+
    "\134\3\0\1\140\1\120\1\0\2\64\1\122\11\0\14\64\5\0\1\137\2\0\2\64\1\122\51"+
    "\0\13\64\1\120\12\0\1\64\11\0\14\64\5\0\1\134\2\0\2\64\1\122\11\0\12\64\1"+
    "\120\5\0\2\64\1\122\15\0\6\64\1\122\5\0\2\64\1\122\1\142\130\0\10\43\10\47"+
    "\2\64\1\122\4\0\1\140\60\0\16\64\1\134\1\0\2\64\1\131\10\64\1\120\4\0\1\134"+
    "\3\0\2\64\1\122\5\0\1\123\7\64\34\0\46\64\1\122\71\0\61\64\57\0\13\64\1\120"+
    "\64\0\21\64\1\120\56\0\16\64\1\134\1\0\7\64\1\120\2\64\1\122\31\0\7\64\1\122"+
    "\4\0\14\64\3\0\1\75\1\64\1\127\2\0\2\64\1\122\1\0\1\140\5\64\1\0\1\124\4\64"+
    "\34\0\21\64\1\134\2\0\1\134\17\0\1\140\3\64\20\0\1\134\7\0\73\64\1\134\4\0"+
    "\74\64\1\120\3\0\1\122\77\0\32\64\1\120\1\0\3\64\1\134\2\64\1\134\1\0\2\64"+
    "\1\122\1\150\30\0\75\75\1\40\2\0\11\75\1\35\1\117\16\75\1\150\1\34\1\150\4"+
    "\0\1\142\1\150\1\0\7\75\1\40\1\34\16\75\1\150\5\0\20\75\1\40\1\127\56\0\25"+
    "\75\1\35\52\0\6\43\1\173\6\47\6\43\1\173\1\47\1\157\4\47\6\43\1\173\6\47\1"+
    "\106\1\242\1\243\1\114\1\106\1\43\1\173\1\223\1\116\1\47\1\116\2\47\6\43\1"+
    "\173\6\47\1\107\1\105\1\114\1\43\1\106\1\43\1\244\6\47\1\107\1\105\1\43\1"+
    "\245\1\246\1\43\1\244\6\47\6\43\1\173\6\47\6\43\1\173\6\47\6\43\1\173\6\47"+
    "\6\43\1\173\6\47\6\43\1\173\6\47\6\43\1\173\6\47\1\154\6\43\1\247\5\47\1\50"+
    "\1\47\1\61\5\43\1\44\6\47\1\250\1\47\6\43\1\247\5\47\1\50\1\47\1\61\5\43\1"+
    "\44\6\47\1\250\1\47\6\43\1\247\5\47\1\50\1\47\1\53\1\123\14\64\15\0\1\142"+
    "\1\35\14\0\1\117\1\75\1\37\3\75\1\251\36\0\61\64\1\134\16\0\10\43\1\173\10"+
    "\47\3\0\2\64\1\122\51\0\1\64\1\124\6\64\1\126\1\135\1\124\1\64\1\120\1\64"+
    "\1\145\1\0\1\133\1\140\1\145\1\124\1\126\1\135\2\145\1\126\1\135\1\120\1\64"+
    "\1\120\1\64\1\124\1\136\2\64\1\137\4\64\1\0\2\124\1\137\4\64\15\0\1\40\3\0"+
    "\13\75\1\0\31\75\3\0\3\75\1\35\1\117\3\75\1\117\3\75\1\117\10\75\1\40\6\0"+
    "\7\75\1\35\6\215\1\252\1\75\6\215\1\252\1\0\6\215\1\252\10\75\1\150\15\0\1"+
    "\34\6\75\1\35\3\0\13\75\1\0\2\75\1\150\1\0\1\40\53\0\64\75\1\35\3\0\3\75\1"+
    "\150\1\75\1\35\2\0\35\75\3\0\25\75\1\150\12\0\3\75\1\0\16\75\2\0\2\75\1\40"+
    "\1\0\12\75\2\0\7\75\1\40\30\0\3\75\1\35\2\75\2\0\1\121\2\75\1\35\3\75\1\0"+
    "\3\75\1\35\10\0\4\75\1\40\13\0\1\150\17\0\65\64\1\120\12\0\15\64\1\134\2\0"+
    "\67\64\1\122\140\64\1\122\27\0\7\64\1\122\70\0");

  /* The ZZ_CMAP_A table has 684 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\0\1\1\1\73\1\150\2\147\2\0\1\71\1\2\1\26\1\2\1\13\1\2\1\35\1\7\1\142\1"+
    "\143\1\2\1\34\1\141\1\33\1\30\1\2\1\121\1\61\1\62\1\63\1\64\2\25\1\137\1\16"+
    "\1\130\1\134\1\133\1\126\1\123\1\124\2\2\1\56\1\37\1\46\1\60\1\32\1\44\1\52"+
    "\1\41\1\50\1\22\1\57\1\43\1\51\1\54\1\24\1\50\1\55\1\47\1\40\1\42\1\53\1\45"+
    "\1\22\1\20\1\65\1\22\1\144\1\27\1\145\1\66\1\4\1\140\1\75\1\36\1\111\1\74"+
    "\1\31\1\103\1\106\1\115\1\105\2\21\1\110\1\107\1\101\1\23\1\100\1\21\1\104"+
    "\1\112\1\76\1\114\1\113\1\102\1\17\1\77\1\21\1\67\1\72\1\70\1\146\2\0\1\150"+
    "\4\0\5\12\1\0\2\12\1\6\1\0\1\12\1\0\4\12\2\0\1\12\1\6\1\0\1\135\1\12\1\0\1"+
    "\6\1\0\7\11\1\12\3\11\3\6\1\116\10\6\1\12\1\11\1\6\1\11\2\6\1\11\1\6\1\11"+
    "\2\6\1\11\1\6\2\11\1\6\1\11\1\6\1\11\3\6\2\11\1\6\1\11\1\6\2\11\1\6\3\11\2"+
    "\6\3\11\3\6\1\11\2\6\5\5\1\11\1\5\1\6\1\11\1\5\1\6\1\11\1\5\1\6\1\11\1\5\1"+
    "\6\1\5\4\6\3\5\2\6\4\12\1\117\3\5\6\12\1\6\3\12\1\5\1\12\1\5\1\12\1\0\1\3"+
    "\2\0\1\5\1\12\1\11\1\6\2\0\4\6\1\0\1\11\2\12\1\11\1\0\3\11\1\0\1\11\1\0\4"+
    "\11\1\0\1\11\3\6\2\11\1\6\1\12\2\11\1\6\1\12\3\0\1\11\1\6\1\0\3\11\1\0\1\5"+
    "\3\0\3\6\1\0\3\12\3\5\1\0\1\12\2\0\1\12\2\5\4\0\2\5\1\0\3\5\2\0\1\12\2\0\2"+
    "\5\2\0\1\12\2\0\1\5\2\12\2\5\1\0\4\5\1\12\3\0\1\5\1\0\1\5\3\0\1\5\2\0\2\5"+
    "\1\0\1\5\1\0\2\5\1\0\1\5\3\0\1\5\1\12\1\5\5\0\1\12\2\0\1\5\1\12\1\0\1\12\2"+
    "\5\1\0\1\5\1\0\2\5\4\12\1\0\1\12\1\0\1\12\3\0\2\12\1\0\1\12\1\0\1\11\2\0\2"+
    "\11\2\0\2\6\2\0\1\6\4\0\1\11\1\0\1\11\1\6\1\0\2\6\1\5\1\12\1\6\3\12\2\6\1"+
    "\11\3\12\1\5\2\12\1\0\2\150\3\0\1\6\2\0\1\12\2\0\1\6\1\120\5\12\1\11\4\12"+
    "\1\11\2\12\1\6\3\11\2\6\1\12\1\11\3\12\5\11\2\12\1\11\1\12\1\11\1\12\1\11"+
    "\1\12\4\11\1\12\1\6\1\5\1\6\3\12\1\11\2\6\2\12\1\6\1\12\4\10\4\3\3\0\1\11"+
    "\1\132\1\12\1\131\1\12\1\127\1\12\1\125\1\12\1\122\6\12\1\136\2\12\6\15\6"+
    "\14\2\0\3\6\1\0\1\11\2\6\1\11\1\6\1\11\1\6\1\0\2\6\1\0\1\6\1\12\2\5\1\0\1"+
    "\5\1\0\3\12\3\5\1\11\1\6\1\5\1\0\3\12\1\5\2\12\1\11\1\6\1\5\2\12\1\11\1\6"+
    "\1\11\1\6\1\5\3\6\4\5\3\12\1\5\4\0\1\6\1\5\1\12\2\5\1\12\3\6\2\0\1\11\2\0"+
    "\2\11\1\0\1\11\1\0\2\6\1\11\1\0\1\11\3\0\3\11\1\12\3\6\1\12\2\6\1\0\2\12\1"+
    "\0\2\15\2\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\1\1\5\2\3"+
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\1\4"+
    "\1\3\1\12\1\13\1\14\14\4\1\6\1\15\1\16"+
    "\1\17\1\3\1\20\1\21\1\22\1\23\1\3\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\3\3\33"+
    "\1\34\1\35\1\36\2\34\2\0\1\37\2\0\1\40"+
    "\2\0\1\41\1\4\1\42\1\21\1\43\1\44\3\4"+
    "\1\45\7\4\1\46\1\47\7\4\2\0\1\17\1\22"+
    "\1\20\1\24\1\50\1\51\1\52\1\0\2\53\3\0"+
    "\1\54\14\0\2\55\20\0\2\56\1\0\1\57\1\0"+
    "\1\4\1\42\1\60\2\4\1\61\13\4\1\62\3\4"+
    "\1\15\1\24\2\6\2\53\4\0\1\53\6\0\1\35"+
    "\17\0\1\63\1\4\1\64\1\65\1\66\1\67\11\4"+
    "\1\70\2\4\4\0\2\4\1\71\2\4\1\72\1\73"+
    "\3\4\1\74\1\4\1\17\1\20\1\21\1\22\1\75"+
    "\2\4\1\15\1\76\1\77\1\4\1\100\1\101\1\102"+
    "\1\103\1\104\1\4\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\151\0\322\0\u013b\0\u01a4\0\u020d\0\u0276\0\u02df"+
    "\0\u0348\0\u03b1\0\u041a\0\u0483\0\u04ec\0\u0555\0\u05be\0\u0627"+
    "\0\u0690\0\u06f9\0\u0762\0\u07cb\0\u0834\0\u089d\0\u01a4\0\u0483"+
    "\0\u0906\0\u096f\0\u09d8\0\u0a41\0\u0aaa\0\u0b13\0\u0b7c\0\u0be5"+
    "\0\u0c4e\0\u0cb7\0\u0d20\0\u0d89\0\u0df2\0\u041a\0\u0e5b\0\u041a"+
    "\0\u0ec4\0\u041a\0\u041a\0\u041a\0\u01a4\0\u0f2d\0\u041a\0\u041a"+
    "\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u0f96\0\u01a4\0\u0fff"+
    "\0\u1068\0\u10d1\0\u01a4\0\u113a\0\u01a4\0\u11a3\0\u120c\0\u1275"+
    "\0\u12de\0\u1347\0\u13b0\0\u02df\0\u1419\0\u1482\0\u0276\0\u14eb"+
    "\0\u1554\0\u0276\0\u01a4\0\u02df\0\u15bd\0\u1626\0\u168f\0\u02df"+
    "\0\u16f8\0\u1761\0\u17ca\0\u1833\0\u189c\0\u1905\0\u196e\0\u19d7"+
    "\0\u02df\0\u1a40\0\u1aa9\0\u1b12\0\u1b7b\0\u1be4\0\u1c4d\0\u1cb6"+
    "\0\u1d1f\0\u1d88\0\u0483\0\u0276\0\u0483\0\u0276\0\u0483\0\u01a4"+
    "\0\u01a4\0\u1df1\0\u01a4\0\u1e5a\0\u1ec3\0\u1f2c\0\u1f95\0\u01a4"+
    "\0\u1ffe\0\u2067\0\u20d0\0\u2139\0\u21a2\0\u220b\0\u2274\0\u22dd"+
    "\0\u2346\0\u23af\0\u2418\0\u2481\0\u01a4\0\u120c\0\u24ea\0\u2553"+
    "\0\u25bc\0\u2625\0\u268e\0\u26f7\0\u2760\0\u27c9\0\u2832\0\u289b"+
    "\0\u2904\0\u296d\0\u29d6\0\u2a3f\0\u2aa8\0\u2b11\0\u2b7a\0\u2be3"+
    "\0\u2c4c\0\u01a4\0\u2cb5\0\u2d1e\0\u2d87\0\u2df0\0\u2e59\0\u2ec2"+
    "\0\u02df\0\u2f2b\0\u2f94\0\u2ffd\0\u3066\0\u30cf\0\u3138\0\u31a1"+
    "\0\u320a\0\u3273\0\u32dc\0\u3345\0\u02df\0\u33ae\0\u3417\0\u3480"+
    "\0\u01a4\0\u01a4\0\u1d1f\0\u1d88\0\u1ec3\0\u1f2c\0\u34e9\0\u3552"+
    "\0\u35bb\0\u3624\0\u368d\0\u36f6\0\u375f\0\u37c8\0\u3831\0\u389a"+
    "\0\u3903\0\u2481\0\u396c\0\u39d5\0\u3a3e\0\u3aa7\0\u3b10\0\u3b79"+
    "\0\u3be2\0\u3c4b\0\u3cb4\0\u3d1d\0\u3d86\0\u3def\0\u3e58\0\u3ec1"+
    "\0\u3f2a\0\u02df\0\u3f93\0\u02df\0\u02df\0\u02df\0\u02df\0\u3ffc"+
    "\0\u4065\0\u40ce\0\u4137\0\u41a0\0\u4209\0\u4272\0\u42db\0\u4344"+
    "\0\u02df\0\u43ad\0\u4416\0\u447f\0\u44e8\0\u4551\0\u45ba\0\u4623"+
    "\0\u468c\0\u02df\0\u46f5\0\u475e\0\u02df\0\u47c7\0\u4830\0\u4899"+
    "\0\u4902\0\u02df\0\u496b\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u02df"+
    "\0\u49d4\0\u4a3d\0\u02df\0\u02df\0\u02df\0\u4aa6\0\u02df\0\u02df"+
    "\0\u02df\0\u02df\0\u02df\0\u4b0f\0\u02df";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\2\10\1\5\1\10\1\11\2\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\10\1\12\1\10"+
    "\1\12\1\20\1\12\1\17\1\21\1\22\1\23\1\24"+
    "\1\12\1\25\1\14\1\7\1\10\22\12\4\17\1\12"+
    "\1\14\1\26\1\27\1\6\1\30\1\6\1\31\1\32"+
    "\1\33\2\10\1\34\1\35\1\36\1\10\1\37\1\10"+
    "\1\40\1\41\1\42\3\10\1\43\1\44\1\5\1\13"+
    "\1\45\1\46\1\47\1\14\1\50\1\51\1\52\1\17"+
    "\1\53\1\54\1\55\1\56\1\5\1\57\1\17\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\6\1\0"+
    "\33\67\1\70\33\67\1\71\61\67\26\72\1\73\1\74"+
    "\121\72\26\75\1\76\122\75\152\0\1\6\67\0\1\6"+
    "\1\0\1\6\53\0\1\6\3\0\1\7\10\0\1\7"+
    "\13\0\2\7\2\0\3\7\30\0\1\7\3\0\1\7"+
    "\30\0\2\7\1\0\1\7\5\0\1\7\11\0\1\7"+
    "\6\0\4\10\1\0\1\10\4\0\10\10\3\0\2\10"+
    "\3\0\30\10\6\0\24\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\11\0\27\77\1\100\43\77\1\0\53\77"+
    "\6\0\4\12\1\0\1\12\4\0\10\12\2\0\1\101"+
    "\2\12\3\0\30\12\6\0\24\12\1\0\1\12\6\0"+
    "\1\12\6\0\1\12\23\0\4\13\16\0\1\13\31\0"+
    "\1\13\3\0\1\13\25\0\1\13\1\0\6\13\1\0"+
    "\2\13\3\0\1\13\1\0\1\13\5\0\1\13\4\0"+
    "\1\7\7\0\1\13\1\14\2\13\11\0\2\7\2\0"+
    "\1\7\1\14\1\7\30\0\1\14\3\0\1\14\25\0"+
    "\1\13\1\0\1\13\2\14\1\13\1\14\1\13\1\0"+
    "\2\13\1\0\1\7\1\0\1\13\1\0\1\13\5\0"+
    "\1\14\6\0\4\10\1\0\1\10\4\13\10\10\3\0"+
    "\2\10\1\0\1\13\1\0\30\10\1\13\3\0\1\13"+
    "\1\0\24\10\1\13\1\10\6\13\1\10\2\13\3\0"+
    "\1\13\1\10\1\13\5\0\1\13\6\0\4\12\1\0"+
    "\1\12\4\13\10\12\2\0\1\101\2\12\1\0\1\13"+
    "\1\0\30\12\1\13\3\0\1\13\1\0\24\12\1\13"+
    "\1\12\6\13\1\12\2\13\3\0\1\13\1\12\1\13"+
    "\5\0\1\13\6\0\1\17\11\0\1\17\6\0\1\17"+
    "\2\0\1\102\2\103\26\0\4\17\34\0\1\17\6\0"+
    "\1\17\6\0\1\17\15\0\4\10\1\0\1\10\4\0"+
    "\10\10\3\0\2\10\3\0\30\10\6\0\7\10\1\104"+
    "\14\10\1\0\1\10\6\0\1\10\6\0\1\10\37\0"+
    "\1\105\124\0\1\7\10\0\1\7\13\0\2\7\2\0"+
    "\3\7\30\0\1\7\3\0\1\7\21\0\1\106\6\0"+
    "\2\7\1\0\1\7\5\0\1\7\11\0\1\7\4\0"+
    "\1\7\10\0\1\7\13\0\1\7\1\107\2\0\3\7"+
    "\30\0\1\7\3\0\1\7\30\0\2\7\1\0\1\7"+
    "\5\0\1\7\11\0\1\7\6\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\2\10\3\0\30\10\6\0\14\10"+
    "\1\110\7\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\13\0\1\7\10\0\1\7\13\0\2\7\2\0\1\111"+
    "\2\7\30\0\1\7\3\0\1\7\30\0\1\7\1\112"+
    "\1\0\1\7\5\0\1\7\11\0\1\7\35\0\1\113"+
    "\121\0\4\10\1\0\1\10\4\0\5\10\1\114\2\10"+
    "\3\0\1\115\1\10\3\0\30\10\6\0\1\10\1\116"+
    "\22\10\1\0\1\10\6\0\1\10\6\0\1\10\15\0"+
    "\4\10\1\0\1\10\4\0\10\10\3\0\2\10\3\0"+
    "\30\10\6\0\1\117\15\10\1\120\5\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\15\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\2\10\3\0\30\10\6\0\3\10"+
    "\1\121\4\10\1\122\10\10\1\123\2\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\15\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\1\124\1\10\3\0\30\10\6\0"+
    "\24\10\1\0\1\10\6\0\1\10\6\0\1\10\15\0"+
    "\4\10\1\0\1\10\4\0\10\10\3\0\2\10\3\0"+
    "\30\10\6\0\21\10\1\125\2\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\5\10\1\126\2\10\3\0\2\10\3\0\30\10\6\0"+
    "\1\10\1\127\22\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\15\0\4\10\1\0\1\10\4\0\10\10\3\0"+
    "\2\10\3\0\30\10\6\0\5\10\1\130\1\10\1\131"+
    "\3\10\1\132\10\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\15\0\4\10\1\0\1\10\4\0\5\10\1\133"+
    "\2\10\3\0\2\10\3\0\30\10\6\0\24\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\15\0\4\10\1\0"+
    "\1\10\4\0\10\10\3\0\1\134\1\10\3\0\30\10"+
    "\6\0\24\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\15\0\4\10\1\0\1\10\4\0\10\10\3\0\2\10"+
    "\3\0\30\10\6\0\1\10\1\135\12\10\1\136\7\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\15\0\4\10"+
    "\1\0\1\10\4\0\10\10\3\0\2\10\3\0\30\10"+
    "\6\0\11\10\1\137\12\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\15\0\4\10\1\0\1\10\4\0\10\10"+
    "\3\0\2\10\3\0\30\10\6\0\23\10\1\140\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\15\0\1\17\11\0"+
    "\1\17\2\141\2\0\2\142\1\17\2\0\1\102\2\103"+
    "\26\0\4\17\34\0\1\17\6\0\1\17\6\0\1\17"+
    "\13\0\1\7\7\0\1\13\1\14\2\13\11\0\2\7"+
    "\2\0\1\7\1\14\1\7\30\0\1\14\3\0\1\14"+
    "\25\0\1\13\1\0\1\13\1\14\1\143\1\13\1\14"+
    "\1\13\1\0\2\13\1\0\1\7\1\0\1\13\1\0"+
    "\1\13\5\0\1\14\4\0\1\7\7\0\1\13\1\14"+
    "\2\13\11\0\2\7\2\0\1\144\1\14\1\7\30\0"+
    "\1\14\3\0\1\14\25\0\1\13\1\0\1\13\1\145"+
    "\1\14\1\13\1\14\1\13\1\0\2\13\1\0\1\7"+
    "\1\0\1\13\1\0\1\13\5\0\1\14\4\0\1\7"+
    "\10\0\1\7\13\0\2\7\2\0\3\7\30\0\1\7"+
    "\3\0\1\7\30\0\2\7\1\0\1\7\5\0\1\146"+
    "\11\0\1\7\4\0\1\7\7\0\1\13\1\14\2\13"+
    "\11\0\2\7\2\0\1\7\1\14\1\7\30\0\1\14"+
    "\3\0\1\14\25\0\1\13\1\0\1\13\1\14\1\147"+
    "\1\13\1\14\1\13\1\0\2\13\1\0\1\7\1\0"+
    "\1\13\1\0\1\13\5\0\1\14\72\0\1\150\113\0"+
    "\1\151\115\0\26\72\2\0\121\72\1\0\1\152\5\0"+
    "\1\153\6\0\1\154\1\155\3\0\1\156\1\0\1\154"+
    "\2\153\2\0\1\157\2\0\1\160\1\153\1\161\1\162"+
    "\1\163\1\0\1\164\1\165\1\163\1\166\1\167\2\0"+
    "\2\167\1\170\1\0\1\171\1\0\1\172\4\154\1\0"+
    "\1\173\2\0\1\152\1\0\1\152\1\0\2\153\2\0"+
    "\1\153\1\0\2\153\6\0\1\153\5\0\1\154\6\0"+
    "\1\154\6\0\1\154\7\0\1\152\27\0\1\174\131\0"+
    "\1\175\150\0\1\176\6\0\1\177\1\200\3\0\1\201"+
    "\1\0\1\177\2\77\2\0\1\202\3\0\1\77\1\203"+
    "\1\204\1\205\1\0\1\206\1\207\1\205\1\210\1\211"+
    "\2\0\2\211\1\212\1\0\1\213\1\0\1\214\4\177"+
    "\1\0\1\215\6\0\2\77\2\0\1\77\1\0\2\77"+
    "\6\0\1\77\5\0\1\177\6\0\1\177\6\0\1\177"+
    "\21\0\2\216\3\0\1\216\2\0\1\216\1\0\1\216"+
    "\1\0\1\216\5\0\1\216\4\0\22\216\4\0\1\216"+
    "\101\0\1\217\6\0\1\217\33\0\4\217\34\0\1\217"+
    "\6\0\1\217\6\0\1\217\27\0\1\220\6\0\1\220"+
    "\5\0\2\221\24\0\4\220\34\0\1\220\6\0\1\220"+
    "\6\0\1\220\37\0\1\222\204\0\1\223\72\0\4\10"+
    "\1\0\1\10\4\0\10\10\3\0\2\10\3\0\30\10"+
    "\6\0\16\10\1\224\5\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\11\0\71\225\1\111\1\226\1\0\55\225"+
    "\4\0\4\10\1\0\1\10\4\0\10\10\3\0\2\10"+
    "\3\0\30\10\6\0\10\10\1\227\13\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\15\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\2\10\3\0\30\10\6\0\2\10"+
    "\1\230\21\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\15\0\4\10\1\0\1\10\4\0\5\10\1\231\2\10"+
    "\3\0\2\10\3\0\30\10\6\0\24\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\15\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\2\10\3\0\30\10\6\0\4\10"+
    "\1\232\17\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\15\0\4\10\1\0\1\10\4\0\10\10\3\0\2\10"+
    "\3\0\30\10\6\0\20\10\1\233\3\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\15\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\1\234\1\10\3\0\30\10\6\0"+
    "\24\10\1\0\1\10\6\0\1\10\6\0\1\10\15\0"+
    "\4\10\1\0\1\10\4\0\10\10\3\0\2\10\3\0"+
    "\30\10\6\0\6\10\1\235\15\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\10\10\3\0\1\236\1\10\3\0\30\10\6\0\24\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\15\0\4\10"+
    "\1\0\1\10\4\0\10\10\3\0\2\10\3\0\30\10"+
    "\6\0\10\10\1\237\13\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\15\0\4\10\1\0\1\10\4\0\10\10"+
    "\3\0\2\10\3\0\30\10\6\0\14\10\1\240\7\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\15\0\4\10"+
    "\1\0\1\10\4\0\10\10\3\0\2\10\3\0\30\10"+
    "\6\0\7\10\1\241\6\10\1\242\5\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\15\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\2\10\3\0\30\10\6\0\4\10"+
    "\1\243\17\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\15\0\4\10\1\0\1\10\4\0\10\10\3\0\2\10"+
    "\3\0\30\10\6\0\1\244\23\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\10\10\3\0\2\10\3\0\30\10\6\0\2\10\1\245"+
    "\21\10\1\0\1\10\6\0\1\10\6\0\1\10\15\0"+
    "\4\10\1\0\1\10\4\0\10\10\3\0\2\10\3\0"+
    "\30\10\6\0\16\10\1\246\5\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\10\10\3\0\2\10\3\0\30\10\6\0\1\10\1\247"+
    "\22\10\1\0\1\10\6\0\1\10\6\0\1\10\15\0"+
    "\4\10\1\0\1\10\4\0\10\10\3\0\2\10\3\0"+
    "\30\10\6\0\1\250\23\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\15\0\4\10\1\0\1\10\4\0\10\10"+
    "\3\0\2\10\3\0\30\10\6\0\24\10\1\251\1\10"+
    "\6\0\1\10\4\0\1\252\1\0\1\10\27\0\10\253"+
    "\3\0\2\253\3\0\30\253\6\0\22\253\3\0\1\253"+
    "\6\0\1\253\6\0\1\253\36\0\1\254\33\0\4\254"+
    "\34\0\1\254\15\0\1\254\12\0\1\152\25\0\1\160"+
    "\41\0\1\152\1\0\1\152\53\0\1\152\5\0\1\154"+
    "\11\0\1\154\6\0\1\154\33\0\4\154\34\0\1\154"+
    "\6\0\1\154\6\0\1\154\27\0\10\255\3\0\2\255"+
    "\3\0\30\255\6\0\22\255\3\0\1\255\6\0\1\255"+
    "\6\0\1\255\36\0\1\256\33\0\4\256\34\0\1\256"+
    "\15\0\1\256\35\0\1\163\13\0\1\257\1\0\1\260"+
    "\6\0\1\153\2\0\1\261\126\0\1\262\5\0\1\153"+
    "\134\0\1\263\15\0\1\264\5\0\1\153\2\0\1\265"+
    "\11\0\1\266\125\0\1\153\152\0\1\153\144\0\1\153"+
    "\3\0\1\153\153\0\1\153\6\0\1\266\132\0\1\153"+
    "\163\0\1\262\2\0\1\267\140\0\1\267\134\0\1\262"+
    "\10\0\1\270\2\0\1\271\112\0\2\153\3\0\1\153"+
    "\2\0\1\153\1\0\1\153\1\0\1\153\5\0\1\153"+
    "\4\0\22\153\4\0\1\153\111\0\1\272\126\0\1\177"+
    "\2\0\1\175\6\0\1\177\6\0\1\177\33\0\4\177"+
    "\34\0\1\177\6\0\1\177\6\0\1\177\27\0\10\273"+
    "\3\0\2\273\3\0\30\273\6\0\22\273\3\0\1\273"+
    "\6\0\1\273\6\0\1\273\36\0\1\274\33\0\4\274"+
    "\34\0\1\274\15\0\1\274\35\0\1\205\13\0\1\275"+
    "\1\0\1\276\6\0\1\77\2\0\1\277\126\0\1\300"+
    "\5\0\1\77\134\0\1\301\15\0\1\302\5\0\1\77"+
    "\2\0\1\303\11\0\1\304\125\0\1\77\152\0\1\77"+
    "\144\0\1\77\3\0\1\77\153\0\1\77\6\0\1\304"+
    "\132\0\1\77\163\0\1\300\2\0\1\305\140\0\1\305"+
    "\134\0\1\300\10\0\1\306\2\0\1\307\112\0\2\77"+
    "\3\0\1\77\2\0\1\77\1\0\1\77\1\0\1\77"+
    "\5\0\1\77\4\0\22\77\4\0\1\77\67\0\4\216"+
    "\1\0\1\216\4\0\10\216\2\0\1\101\2\216\3\0"+
    "\30\216\6\0\24\216\1\0\1\216\6\0\1\216\6\0"+
    "\1\216\15\0\1\217\11\0\1\217\6\0\1\217\3\0"+
    "\2\103\26\0\4\217\34\0\1\217\6\0\1\217\6\0"+
    "\1\217\15\0\1\220\11\0\1\220\6\0\1\220\33\0"+
    "\4\220\34\0\1\220\6\0\1\220\6\0\1\220\27\0"+
    "\1\220\6\0\1\220\33\0\4\220\34\0\1\220\6\0"+
    "\1\220\6\0\1\220\72\0\1\310\1\311\72\0\4\10"+
    "\1\0\1\10\4\0\10\10\3\0\1\312\1\10\3\0"+
    "\30\10\6\0\24\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\11\0\73\225\1\0\55\225\73\226\1\0\55\226"+
    "\4\0\4\10\1\0\1\10\4\0\10\10\3\0\2\10"+
    "\3\0\30\10\6\0\11\10\1\313\12\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\15\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\2\10\3\0\30\10\6\0\1\10"+
    "\1\314\22\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\15\0\4\10\1\0\1\10\4\0\10\10\3\0\1\315"+
    "\1\10\3\0\30\10\6\0\24\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\10\10\3\0\1\316\1\10\3\0\30\10\6\0\24\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\15\0\4\10"+
    "\1\0\1\10\4\0\10\10\3\0\2\10\3\0\30\10"+
    "\6\0\5\10\1\317\16\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\15\0\4\10\1\0\1\10\4\0\10\10"+
    "\3\0\2\10\3\0\30\10\6\0\2\10\1\320\21\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\15\0\4\10"+
    "\1\0\1\10\4\0\10\10\3\0\2\10\3\0\30\10"+
    "\6\0\10\10\1\321\13\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\15\0\4\10\1\0\1\10\4\0\10\10"+
    "\3\0\1\322\1\10\3\0\30\10\6\0\1\10\1\323"+
    "\22\10\1\0\1\10\6\0\1\10\6\0\1\10\15\0"+
    "\4\10\1\0\1\10\4\0\10\10\3\0\2\10\3\0"+
    "\30\10\6\0\16\10\1\324\5\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\10\10\3\0\2\10\3\0\30\10\6\0\11\10\1\325"+
    "\12\10\1\0\1\10\6\0\1\10\6\0\1\10\15\0"+
    "\4\10\1\0\1\10\4\0\10\10\3\0\2\10\3\0"+
    "\30\10\6\0\2\10\1\326\21\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\5\10\1\327\2\10\3\0\2\10\3\0\30\10\6\0"+
    "\24\10\1\0\1\10\6\0\1\10\6\0\1\10\15\0"+
    "\4\10\1\0\1\10\4\0\10\10\3\0\2\10\3\0"+
    "\30\10\6\0\20\10\1\330\3\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\10\10\3\0\1\331\1\10\3\0\30\10\6\0\24\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\15\0\4\10"+
    "\1\0\1\10\4\0\10\10\3\0\2\10\3\0\30\10"+
    "\6\0\16\10\1\332\5\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\15\0\4\10\1\0\1\10\4\0\10\10"+
    "\3\0\2\10\3\0\30\10\6\0\11\10\1\333\12\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\57\0\1\153"+
    "\122\0\1\153\16\0\1\153\166\0\1\153\136\0\1\153"+
    "\146\0\1\153\127\0\1\153\167\0\1\153\165\0\1\153"+
    "\153\0\1\153\123\0\1\153\177\0\4\153\73\0\1\175"+
    "\6\0\10\273\3\0\2\273\3\0\30\273\6\0\22\273"+
    "\3\0\1\273\6\0\1\273\6\0\1\273\20\0\1\175"+
    "\15\0\1\274\33\0\4\274\34\0\1\274\15\0\1\274"+
    "\57\0\1\77\122\0\1\77\16\0\1\77\166\0\1\77"+
    "\136\0\1\77\114\0\1\175\31\0\1\77\127\0\1\77"+
    "\167\0\1\77\165\0\1\77\153\0\1\77\123\0\1\77"+
    "\177\0\4\77\144\0\1\334\47\0\1\335\103\0\1\336"+
    "\35\0\1\337\33\0\4\10\1\0\1\10\4\0\10\10"+
    "\3\0\2\10\3\0\30\10\6\0\17\10\1\340\4\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\15\0\4\10"+
    "\1\0\1\10\4\0\10\10\3\0\2\10\3\0\30\10"+
    "\6\0\3\10\1\341\20\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\15\0\4\10\1\0\1\10\4\0\10\10"+
    "\3\0\1\342\1\10\3\0\30\10\6\0\24\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\15\0\4\10\1\0"+
    "\1\10\4\0\10\10\3\0\2\10\3\0\30\10\6\0"+
    "\11\10\1\343\12\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\15\0\4\10\1\0\1\10\4\0\10\10\3\0"+
    "\2\10\3\0\30\10\6\0\14\10\1\344\7\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\15\0\4\10\1\0"+
    "\1\10\4\0\10\10\3\0\1\345\1\10\3\0\30\10"+
    "\6\0\24\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\15\0\4\10\1\0\1\10\4\0\1\10\1\346\6\10"+
    "\3\0\2\10\3\0\30\10\6\0\24\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\15\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\2\10\3\0\30\10\6\0\1\10"+
    "\1\347\22\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\15\0\4\10\1\0\1\10\4\0\10\10\3\0\2\10"+
    "\3\0\30\10\6\0\10\10\1\350\13\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\15\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\2\10\3\0\30\10\6\0\14\10"+
    "\1\351\7\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\15\0\4\10\1\0\1\10\4\0\10\10\3\0\2\10"+
    "\3\0\30\10\6\0\16\10\1\352\5\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\15\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\2\10\3\0\30\10\6\0\5\10"+
    "\1\353\16\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\73\0\1\354\36\0\1\355\111\0\1\356\36\0\1\357"+
    "\166\0\1\252\132\0\1\251\33\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\1\360\1\10\3\0\30\10\6\0"+
    "\24\10\1\0\1\10\6\0\1\10\6\0\1\10\15\0"+
    "\4\10\1\0\1\10\4\0\10\10\3\0\2\10\3\0"+
    "\30\10\6\0\4\10\1\361\17\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\10\10\3\0\2\10\3\0\30\10\6\0\12\10\1\362"+
    "\11\10\1\0\1\10\6\0\1\10\6\0\1\10\15\0"+
    "\4\10\1\0\1\10\4\0\10\10\3\0\2\10\3\0"+
    "\30\10\6\0\14\10\1\363\7\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\10\10\3\0\2\10\3\0\30\10\6\0\10\10\1\364"+
    "\3\10\1\365\7\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\15\0\4\10\1\0\1\10\4\0\10\10\3\0"+
    "\2\10\3\0\30\10\6\0\5\10\1\366\16\10\1\0"+
    "\1\10\6\0\1\10\6\0\1\10\15\0\4\10\1\0"+
    "\1\10\4\0\10\10\3\0\2\10\3\0\30\10\6\0"+
    "\2\10\1\367\21\10\1\0\1\10\6\0\1\10\6\0"+
    "\1\10\15\0\4\10\1\0\1\10\4\0\10\10\3\0"+
    "\1\370\1\10\3\0\30\10\6\0\24\10\1\0\1\10"+
    "\6\0\1\10\6\0\1\10\15\0\4\10\1\0\1\10"+
    "\4\0\10\10\3\0\2\10\3\0\30\10\6\0\12\10"+
    "\1\371\11\10\1\0\1\10\6\0\1\10\6\0\1\10"+
    "\15\0\4\10\1\0\1\10\4\0\10\10\3\0\1\372"+
    "\1\10\3\0\30\10\6\0\24\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\10\10\3\0\2\10\3\0\30\10\6\0\5\10\1\373"+
    "\16\10\1\0\1\10\6\0\1\10\6\0\1\10\15\0"+
    "\4\10\1\0\1\10\4\0\10\10\3\0\2\10\3\0"+
    "\30\10\6\0\15\10\1\374\6\10\1\0\1\10\6\0"+
    "\1\10\6\0\1\10\15\0\4\10\1\0\1\10\4\0"+
    "\10\10\3\0\1\375\1\10\3\0\30\10\6\0\24\10"+
    "\1\0\1\10\6\0\1\10\6\0\1\10\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19320];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\21\1\1\11\25\1\1\11\3\1\5\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\4\1\1\11\25\1\2\0"+
    "\5\1\2\11\1\0\1\11\1\1\3\0\1\11\14\0"+
    "\1\11\1\1\20\0\2\1\1\0\1\11\1\0\25\1"+
    "\2\11\4\1\4\0\1\1\6\0\1\1\17\0\22\1"+
    "\4\0\14\1\4\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   int comment_nesting = 0;
   int yyline = 0;
   int yycolumn = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _PSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
return;


    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 70: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 71: break;
          case 3: 
            { return OPERATOR;
            } 
            // fall through
          case 72: break;
          case 4: 
            { return LOWER;
            } 
            // fall through
          case 73: break;
          case 5: 
            { return PROPER_NAME;
            } 
            // fall through
          case 74: break;
          case 6: 
            { return NATURAL;
            } 
            // fall through
          case 75: break;
          case 7: 
            { yybegin(STRINGS); return STRING;
            } 
            // fall through
          case 76: break;
          case 8: 
            { return BACKSLASH;
            } 
            // fall through
          case 77: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 78: break;
          case 10: 
            { return LCURLY;
            } 
            // fall through
          case 79: break;
          case 11: 
            { return RCURLY;
            } 
            // fall through
          case 80: break;
          case 12: 
            { return PIPE;
            } 
            // fall through
          case 81: break;
          case 13: 
            { return FORALL;
            } 
            // fall through
          case 82: break;
          case 14: 
            { return EQ;
            } 
            // fall through
          case 83: break;
          case 15: 
            { return DARROW;
            } 
            // fall through
          case 84: break;
          case 16: 
            { return LDARROW;
            } 
            // fall through
          case 85: break;
          case 17: 
            { return ARROW;
            } 
            // fall through
          case 86: break;
          case 18: 
            { return LARROW;
            } 
            // fall through
          case 87: break;
          case 19: 
            { return SEMI;
            } 
            // fall through
          case 88: break;
          case 20: 
            { return DCOLON;
            } 
            // fall through
          case 89: break;
          case 21: 
            { return TICK;
            } 
            // fall through
          case 90: break;
          case 22: 
            { return COMMA;
            } 
            // fall through
          case 91: break;
          case 23: 
            { return LPAREN;
            } 
            // fall through
          case 92: break;
          case 24: 
            { return RPAREN;
            } 
            // fall through
          case 93: break;
          case 25: 
            { return LBRACK;
            } 
            // fall through
          case 94: break;
          case 26: 
            { return RBRACK;
            } 
            // fall through
          case 95: break;
          case 27: 
            { return MLCOMMENT;
            } 
            // fall through
          case 96: break;
          case 28: 
            { return STRING;
            } 
            // fall through
          case 97: break;
          case 29: 
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 98: break;
          case 30: 
            { return STRING_ERROR;
            } 
            // fall through
          case 99: break;
          case 31: 
            { return MODULE_PREFIX;
            } 
            // fall through
          case 100: break;
          case 32: 
            { return OF;
            } 
            // fall through
          case 101: break;
          case 33: 
            { return DDOT;
            } 
            // fall through
          case 102: break;
          case 34: 
            { return SLCOMMENT;
            } 
            // fall through
          case 103: break;
          case 35: 
            { yybegin(COMMENT); comment_nesting = 1; return MLCOMMENT;
            } 
            // fall through
          case 104: break;
          case 36: 
            { return DO;
            } 
            // fall through
          case 105: break;
          case 37: 
            { return AS;
            } 
            // fall through
          case 106: break;
          case 38: 
            { return IN;
            } 
            // fall through
          case 107: break;
          case 39: 
            { return IF;
            } 
            // fall through
          case 108: break;
          case 40: 
            { return OPTIMISTIC;
            } 
            // fall through
          case 109: break;
          case 41: 
            { comment_nesting--; if (comment_nesting == 0) yybegin(YYINITIAL); return MLCOMMENT;
            } 
            // fall through
          case 110: break;
          case 42: 
            { comment_nesting++; return MLCOMMENT;
            } 
            // fall through
          case 111: break;
          case 43: 
            { return STRING_ESCAPED;
            } 
            // fall through
          case 112: break;
          case 44: 
            { return STRING_GAP;
            } 
            // fall through
          case 113: break;
          case 45: 
            { return CHAR;
            } 
            // fall through
          case 114: break;
          case 46: 
            { return FLOAT;
            } 
            // fall through
          case 115: break;
          case 47: 
            { yybegin(BLOCK_STRINGS); return STRING;
            } 
            // fall through
          case 116: break;
          case 48: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 117: break;
          case 49: 
            { return ADO;
            } 
            // fall through
          case 118: break;
          case 50: 
            { return LET;
            } 
            // fall through
          case 119: break;
          case 51: 
            { return ELSE;
            } 
            // fall through
          case 120: break;
          case 52: 
            { return DATA;
            } 
            // fall through
          case 121: break;
          case 53: 
            { return TYPE;
            } 
            // fall through
          case 122: break;
          case 54: 
            { return TRUE;
            } 
            // fall through
          case 123: break;
          case 55: 
            { return THEN;
            } 
            // fall through
          case 124: break;
          case 56: 
            { return CASE;
            } 
            // fall through
          case 125: break;
          case 57: 
            { return WHERE;
            } 
            // fall through
          case 126: break;
          case 58: 
            { return FALSE;
            } 
            // fall through
          case 127: break;
          case 59: 
            { return INFIX;
            } 
            // fall through
          case 128: break;
          case 60: 
            { return CLASS;
            } 
            // fall through
          case 129: break;
          case 61: 
            { return DERIVE;
            } 
            // fall through
          case 130: break;
          case 62: 
            { return INFIXR;
            } 
            // fall through
          case 131: break;
          case 63: 
            { return INFIXL;
            } 
            // fall through
          case 132: break;
          case 64: 
            { return IMPORT;
            } 
            // fall through
          case 133: break;
          case 65: 
            { return MODULE;
            } 
            // fall through
          case 134: break;
          case 66: 
            { return HIDING;
            } 
            // fall through
          case 135: break;
          case 67: 
            { return NEWTYPE;
            } 
            // fall through
          case 136: break;
          case 68: 
            { return FOREIGN;
            } 
            // fall through
          case 137: break;
          case 69: 
            { return INSTANCE;
            } 
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
