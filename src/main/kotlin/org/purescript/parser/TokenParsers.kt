@file:Suppress("ObjectPropertyName")

package org.purescript.parser

val `'derive'` = ElementToken(DERIVE)
val `'foreign'`  = ElementToken(FOREIGN)
val `'import'` = ElementToken(IMPORT)
val `'instance'` = ElementToken(INSTANCE)
val `'newtype'` = ElementToken(NEWTYPE)
val `'role'` = StringToken("role")
val `'type'` = ElementToken(TYPE)
val `as` = ElementToken(AS)
val `class` = ElementToken(CLASS)
val `do` = ElementToken(DO)
val `else` = ElementToken(ELSE)
val `false` = ElementToken(FALSE)
val `if` = ElementToken(IF)
val `in` = ElementToken(IN)
val `true` = ElementToken(TRUE)
val ado = ElementToken(ADO)
val arrow = ElementToken(ARROW)
val backslash = ElementToken(BACKSLASH)
val case = ElementToken(CASE)
val char = ElementToken(CHAR)
val darrow = ElementToken(DARROW)
val data = ElementToken(DATA)
val dcolon = ElementToken(DCOLON)
val ddot = ElementToken(DDOT)
val dot = ElementToken(DOT)
val eq = ElementToken(EQ)
val forall = ElementToken(FORALL)
val infix = ElementToken(INFIX)
val infixl = ElementToken(INFIXL)
val infixr = ElementToken(INFIXR)
val larrow = ElementToken(LARROW)
val ldarrow = ElementToken(LDARROW)
val let = ElementToken(LET)
val lparen = ElementToken(LPAREN)
val module = ElementToken(MODULE)
val nominal = StringToken("nominal")
val of = ElementToken(OF)
val phantom = StringToken("phantom")
val pipe = ElementToken(PIPE)
val representational = StringToken("representational")
val rparen = ElementToken(RPAREN)
val string = ElementToken(STRING)
val then = ElementToken(THEN) 
val tick = ElementToken(TICK)
val where = ElementToken(WHERE)

@Suppress("ObjectPropertyName")
val `@` = StringToken("@")
@Suppress("ObjectPropertyName")
val `_` = StringToken("_")

val `(` = ElementToken(LPAREN)
val `)` = ElementToken(RPAREN)

val `L{` = ElementToken(LAYOUT_START)
val `L-sep` = ElementToken(LAYOUT_SEP)
val `L}` = ElementToken(LAYOUT_END)

