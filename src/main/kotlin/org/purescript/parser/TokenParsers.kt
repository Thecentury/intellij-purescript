package org.purescript.parser

import org.purescript.parser.Combinators.token

val `'derive'` = token(DERIVE)
val `'foreign'`  = token(FOREIGN)
val `'import'` = token(IMPORT)
val `'instance'` = token(INSTANCE)
val `'newtype'` = token(NEWTYPE)
val `'role'` = token("role")
val `'type'` = token(TYPE)
val `as` = token(AS)
val `class` = token(CLASS)
val `do` = token(DO)
val `else` = token(ELSE)
val `false` = token(FALSE)
val `if` = token(IF)
val `in` = token(IN)
val `true` = token(TRUE)
val arrow = token(ARROW)
val backslash = token(BACKSLASH)
val case = token(CASE)
val char = token(CHAR)
val darrow = token(DARROW)
val data = token(DATA)
val dcolon = token(DCOLON)
val ddot = token(DDOT)
val dot = token(DOT)
val eq = token(EQ)
val forall = token(FORALL)
val infix = token(INFIX)
val infixl = token(INFIXL)
val infixr = token(INFIXR)
val larrow = token(LARROW)
val ldarrow = token(LDARROW)
val lparen = token(LPAREN)
val nominal = token("nominal")
val of = token(OF)
val phantom = token("phantom")
val pipe = token(PIPE)
val representational = token("representational")
val rparen = token(RPAREN)
val string = token(STRING)
val tick = token(TICK)
val where = token(WHERE)

@Suppress("ObjectPropertyName")
val `@` = token("@")
@Suppress("ObjectPropertyName")
val `_` = token("_")

val `L{` = token(LAYOUT_START)
val `L-sep` = token(LAYOUT_SEP)
val `L}` = token(LAYOUT_END)

