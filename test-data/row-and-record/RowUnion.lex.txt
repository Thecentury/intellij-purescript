module ('module')
whitespace (' ')
proper name ('Main')
whitespace (' ')
where ('where')
whitespace ('\n\n')
layout start ('')
import ('import')
whitespace (' ')
proper name ('Prelude')
whitespace ('\n')
layout separator ('')
import ('import')
whitespace (' ')
module prefix ('Control.Monad.')
proper name ('Eff')
whitespace ('\n')
layout separator ('')
import ('import')
whitespace (' ')
module prefix ('Control.Monad.Eff.')
proper name ('Console')
whitespace ('\n\n')
layout separator ('')
foreign ('foreign')
whitespace (' ')
import ('import')
whitespace (' ')
identifier ('merge')
whitespace ('\n  ')
:: ('::')
whitespace (' ')
forall ('forall')
whitespace (' ')
identifier ('r1')
whitespace (' ')
identifier ('r2')
whitespace (' ')
identifier ('r3')
whitespace ('\n   ')
. ('.')
whitespace (' ')
proper name ('Union')
whitespace (' ')
identifier ('r1')
whitespace (' ')
identifier ('r2')
whitespace (' ')
identifier ('r3')
whitespace ('\n  ')
=> ('=>')
whitespace (' ')
proper name ('Record')
whitespace (' ')
identifier ('r1')
whitespace ('\n  ')
-> ('->')
whitespace (' ')
proper name ('Record')
whitespace (' ')
identifier ('r2')
whitespace ('\n  ')
-> ('->')
whitespace (' ')
proper name ('Record')
whitespace (' ')
identifier ('r3')
whitespace ('\n\n')
layout separator ('')
identifier ('test1')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('merge')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
whitespace (' ')
} ('}')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('y')
operator (':')
whitespace (' ')
true ('true')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
identifier ('test2')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('merge')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
whitespace (' ')
} ('}')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
true ('true')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
identifier ('mergeWithExtras')
whitespace ('\n ')
:: ('::')
whitespace (' ')
forall ('forall')
whitespace (' ')
identifier ('r1')
whitespace (' ')
identifier ('r2')
whitespace (' ')
identifier ('r3')
whitespace ('\n  ')
. ('.')
whitespace (' ')
proper name ('Union')
whitespace (' ')
identifier ('r1')
whitespace (' ')
( ('(')
identifier ('y')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Boolean')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('r2')
) (')')
whitespace (' ')
( ('(')
identifier ('y')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Boolean')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('r3')
) (')')
whitespace ('\n ')
=> ('=>')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('r1')
whitespace (' ')
} ('}')
whitespace ('\n ')
-> ('->')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('y')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Boolean')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('r2')
whitespace (' ')
} ('}')
whitespace ('\n ')
-> ('->')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
, (',')
whitespace (' ')
identifier ('y')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Boolean')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('r3')
} ('}')
whitespace ('\n')
layout separator ('')
identifier ('mergeWithExtras')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('merge')
whitespace ('\n\n')
layout separator ('')
identifier ('test3')
whitespace (' ')
identifier ('x')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('merge')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
whitespace (' ')
} ('}')
whitespace (' ')
identifier ('x')
whitespace ('\n')
layout separator ('')
identifier ('test3'')
whitespace (' ')
identifier ('x')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('merge')
whitespace (' ')
identifier ('x')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
type ('type')
whitespace (' ')
proper name ('Mandatory')
whitespace (' ')
identifier ('r')
whitespace (' ')
= ('=')
whitespace (' ')
( ('(')
identifier ('x')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('r')
) (')')
whitespace ('\n')
layout separator ('')
type ('type')
whitespace (' ')
proper name ('Optional')
whitespace (' ')
identifier ('r')
whitespace (' ')
= ('=')
whitespace (' ')
( ('(')
identifier ('x')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
, (',')
whitespace (' ')
identifier ('y')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
, (',')
whitespace (' ')
identifier ('z')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('r')
) (')')
whitespace ('\n\n')
layout separator ('')
identifier ('withDefaults')
whitespace ('\n  ')
:: ('::')
whitespace (' ')
forall ('forall')
whitespace (' ')
identifier ('r')
whitespace (' ')
identifier ('s')
whitespace ('\n   ')
. ('.')
whitespace (' ')
proper name ('Union')
whitespace (' ')
identifier ('r')
whitespace (' ')
( ('(')
identifier ('y')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
, (',')
whitespace (' ')
identifier ('z')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
) (')')
whitespace (' ')
( ('(')
identifier ('y')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
, (',')
whitespace (' ')
identifier ('z')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('s')
) (')')
whitespace ('\n  ')
=> ('=>')
whitespace (' ')
proper name ('Record')
whitespace (' ')
( ('(')
proper name ('Mandatory')
whitespace (' ')
identifier ('r')
) (')')
whitespace ('\n  ')
-> ('->')
whitespace (' ')
proper name ('Record')
whitespace (' ')
( ('(')
proper name ('Optional')
whitespace (' ')
identifier ('s')
) (')')
whitespace ('\n')
layout separator ('')
identifier ('withDefaults')
whitespace (' ')
identifier ('p')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('merge')
whitespace (' ')
identifier ('p')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('y')
operator (':')
whitespace (' ')
natural ('1')
, (',')
whitespace (' ')
identifier ('z')
operator (':')
whitespace (' ')
natural ('1')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
identifier ('withDefaultsClosed')
whitespace ('\n  ')
:: ('::')
whitespace (' ')
forall ('forall')
whitespace (' ')
identifier ('r')
whitespace (' ')
identifier ('s')
whitespace ('\n   ')
. ('.')
whitespace (' ')
proper name ('Union')
whitespace (' ')
identifier ('r')
whitespace (' ')
( ('(')
identifier ('y')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
, (',')
whitespace (' ')
identifier ('z')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
) (')')
whitespace (' ')
( ('(')
identifier ('y')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
, (',')
whitespace (' ')
identifier ('z')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('s')
) (')')
whitespace ('\n  ')
=> ('=>')
whitespace (' ')
proper name ('Subrow')
whitespace (' ')
identifier ('s')
whitespace (' ')
( ('(')
identifier ('y')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
, (',')
whitespace (' ')
identifier ('z')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
) (')')
whitespace ('\n  ')
=> ('=>')
whitespace (' ')
proper name ('Record')
whitespace (' ')
( ('(')
proper name ('Mandatory')
whitespace (' ')
identifier ('r')
) (')')
whitespace ('\n  ')
-> ('->')
whitespace (' ')
proper name ('Record')
whitespace (' ')
( ('(')
proper name ('Optional')
whitespace (' ')
identifier ('s')
) (')')
whitespace ('\n')
layout separator ('')
identifier ('withDefaultsClosed')
whitespace (' ')
identifier ('p')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('merge')
whitespace (' ')
identifier ('p')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('y')
operator (':')
whitespace (' ')
natural ('1')
, (',')
whitespace (' ')
identifier ('z')
operator (':')
whitespace (' ')
natural ('1')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
identifier ('test4')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('withDefaults')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
, (',')
whitespace (' ')
identifier ('y')
operator (':')
whitespace (' ')
natural ('2')
whitespace (' ')
} ('}')
whitespace ('\n\n-- r is a subrow of s if Union r t s for some t.\n')
layout separator ('')
class ('class')
whitespace (' ')
proper name ('Subrow')
whitespace (' ')
( ('(')
identifier ('r')
whitespace (' ')
:: ('::')
whitespace (' ')
operator ('#')
whitespace (' ')
proper name ('Type')
) (')')
whitespace (' ')
( ('(')
identifier ('s')
whitespace (' ')
:: ('::')
whitespace (' ')
operator ('#')
whitespace (' ')
proper name ('Type')
) (')')
whitespace ('\n')
layout separator ('')
instance ('instance')
whitespace (' ')
identifier ('subrow')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Union')
whitespace (' ')
identifier ('r')
whitespace (' ')
identifier ('t')
whitespace (' ')
identifier ('s')
whitespace (' ')
=> ('=>')
whitespace (' ')
proper name ('Subrow')
whitespace (' ')
identifier ('r')
whitespace (' ')
identifier ('s')
whitespace ('\n\n')
layout separator ('')
identifier ('main')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Eff')
whitespace (' ')
( ('(')
identifier ('console')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('CONSOLE')
) (')')
whitespace (' ')
proper name ('Unit')
whitespace ('\n')
layout separator ('')
identifier ('main')
whitespace (' ')
= ('=')
whitespace (' ')
do ('do')
whitespace ('\n  ')
layout start ('')
identifier ('logShow')
whitespace (' ')
identifier ('test1')
. ('.')
identifier ('x')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
identifier ('test1')
. ('.')
identifier ('y')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
( ('(')
identifier ('test1')
. ('.')
identifier ('x')
whitespace (' ')
operator ('==')
whitespace (' ')
natural ('1')
) (')')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
( ('(')
identifier ('mergeWithExtras')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
whitespace (' ')
} ('}')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('0')
, (',')
whitespace (' ')
identifier ('y')
operator (':')
whitespace (' ')
true ('true')
, (',')
whitespace (' ')
identifier ('z')
operator (':')
whitespace (' ')
float ('42.0')
whitespace (' ')
} ('}')
) (')')
. ('.')
identifier ('x')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
( ('(')
identifier ('withDefaults')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
whitespace (' ')
} ('}')
) (')')
. ('.')
identifier ('x')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
( ('(')
identifier ('withDefaults')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
whitespace (' ')
} ('}')
) (')')
. ('.')
identifier ('y')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
( ('(')
identifier ('withDefaults')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
whitespace (' ')
} ('}')
) (')')
. ('.')
identifier ('z')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
( ('(')
identifier ('withDefaults')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
, (',')
whitespace (' ')
identifier ('y')
operator (':')
whitespace (' ')
natural ('2')
whitespace (' ')
} ('}')
) (')')
. ('.')
identifier ('x')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
( ('(')
identifier ('withDefaults')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
, (',')
whitespace (' ')
identifier ('y')
operator (':')
whitespace (' ')
natural ('2')
whitespace (' ')
} ('}')
) (')')
. ('.')
identifier ('y')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
( ('(')
identifier ('withDefaults')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
, (',')
whitespace (' ')
identifier ('y')
operator (':')
whitespace (' ')
natural ('2')
whitespace (' ')
} ('}')
) (')')
. ('.')
identifier ('z')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
( ('(')
identifier ('withDefaultsClosed')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
, (',')
whitespace (' ')
identifier ('y')
operator (':')
whitespace (' ')
natural ('2')
whitespace (' ')
} ('}')
) (')')
. ('.')
identifier ('x')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
( ('(')
identifier ('withDefaultsClosed')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
, (',')
whitespace (' ')
identifier ('y')
operator (':')
whitespace (' ')
natural ('2')
whitespace (' ')
} ('}')
) (')')
. ('.')
identifier ('y')
whitespace ('\n  ')
layout separator ('')
identifier ('logShow')
whitespace (' ')
( ('(')
identifier ('withDefaultsClosed')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
natural ('1')
, (',')
whitespace (' ')
identifier ('y')
operator (':')
whitespace (' ')
natural ('2')
whitespace (' ')
} ('}')
) (')')
. ('.')
identifier ('z')
whitespace ('\n  ')
layout separator ('')
identifier ('log')
whitespace (' ')
string ('"Done"')
layout end ('')
layout end ('')
