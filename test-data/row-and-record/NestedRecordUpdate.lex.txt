module ('module')
whitespace (' ')
proper name ('Main')
whitespace (' ')
where ('where')
whitespace ('\n\n')
layout start ('')
import ('import')
whitespace (' ')
proper name ('Prelude')
whitespace ('\n')
layout separator ('')
import ('import')
whitespace (' ')
module prefix ('Control.Monad.Eff.')
proper name ('Console')
whitespace ('\n\n')
layout separator ('')
type ('type')
whitespace (' ')
proper name ('T')
whitespace (' ')
= ('=')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('foo')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
, (',')
whitespace (' ')
identifier ('bar')
whitespace (' ')
:: ('::')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('baz')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
, (',')
whitespace (' ')
identifier ('qux')
whitespace (' ')
:: ('::')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('lhs')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
, (',')
whitespace (' ')
identifier ('rhs')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Int')
whitespace (' ')
} ('}')
whitespace (' ')
} ('}')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
identifier ('init')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('T')
whitespace ('\n')
layout separator ('')
identifier ('init')
whitespace (' ')
= ('=')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('foo')
operator (':')
whitespace (' ')
natural ('1')
, (',')
whitespace (' ')
identifier ('bar')
operator (':')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('baz')
operator (':')
whitespace (' ')
natural ('2')
, (',')
whitespace (' ')
identifier ('qux')
operator (':')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('lhs')
operator (':')
whitespace (' ')
natural ('3')
, (',')
whitespace (' ')
identifier ('rhs')
operator (':')
whitespace (' ')
natural ('4')
whitespace (' ')
} ('}')
whitespace (' ')
} ('}')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
identifier ('updated')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('T')
whitespace ('\n')
layout separator ('')
identifier ('updated')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('init')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('foo')
whitespace (' ')
= ('=')
whitespace (' ')
natural ('10')
, (',')
whitespace (' ')
identifier ('bar')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('baz')
whitespace (' ')
= ('=')
whitespace (' ')
natural ('20')
, (',')
whitespace (' ')
identifier ('qux')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('lhs')
whitespace (' ')
= ('=')
whitespace (' ')
natural ('30')
, (',')
whitespace (' ')
identifier ('rhs')
whitespace (' ')
= ('=')
whitespace (' ')
natural ('40')
whitespace (' ')
} ('}')
whitespace (' ')
} ('}')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
identifier ('expected')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('T')
whitespace ('\n')
layout separator ('')
identifier ('expected')
whitespace (' ')
= ('=')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('foo')
operator (':')
whitespace (' ')
natural ('10')
, (',')
whitespace (' ')
identifier ('bar')
operator (':')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('baz')
operator (':')
whitespace (' ')
natural ('20')
, (',')
whitespace (' ')
identifier ('qux')
operator (':')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('lhs')
operator (':')
whitespace (' ')
natural ('30')
, (',')
whitespace (' ')
identifier ('rhs')
operator (':')
whitespace (' ')
natural ('40')
whitespace (' ')
} ('}')
whitespace (' ')
} ('}')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
identifier ('check')
whitespace (' ')
identifier ('l')
whitespace (' ')
identifier ('r')
whitespace (' ')
= ('=')
whitespace ('\n  ')
identifier ('l')
. ('.')
identifier ('foo')
whitespace (' ')
operator ('==')
whitespace (' ')
identifier ('r')
. ('.')
identifier ('foo')
whitespace (' ')
operator ('&&')
whitespace ('\n  ')
identifier ('l')
. ('.')
identifier ('bar')
. ('.')
identifier ('baz')
whitespace (' ')
operator ('==')
whitespace (' ')
identifier ('r')
. ('.')
identifier ('bar')
. ('.')
identifier ('baz')
whitespace (' ')
operator ('&&')
whitespace ('\n  ')
identifier ('l')
. ('.')
identifier ('bar')
. ('.')
identifier ('qux')
. ('.')
identifier ('lhs')
whitespace (' ')
operator ('==')
whitespace (' ')
identifier ('r')
. ('.')
identifier ('bar')
. ('.')
identifier ('qux')
. ('.')
identifier ('lhs')
whitespace (' ')
operator ('&&')
whitespace ('\n  ')
identifier ('l')
. ('.')
identifier ('bar')
. ('.')
identifier ('qux')
. ('.')
identifier ('rhs')
whitespace (' ')
operator ('==')
whitespace (' ')
identifier ('r')
. ('.')
identifier ('bar')
. ('.')
identifier ('qux')
. ('.')
identifier ('rhs')
whitespace ('\n\n')
layout separator ('')
identifier ('main')
whitespace (' ')
= ('=')
whitespace (' ')
do ('do')
whitespace ('\n  ')
layout start ('')
identifier ('when')
whitespace (' ')
( ('(')
identifier ('check')
whitespace (' ')
identifier ('updated')
whitespace (' ')
identifier ('expected')
) (')')
whitespace (' ')
operator ('$')
whitespace (' ')
identifier ('log')
whitespace (' ')
string ('"Done"')
layout end ('')
layout end ('')
