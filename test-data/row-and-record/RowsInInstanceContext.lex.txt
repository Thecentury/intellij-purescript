module ('module')
whitespace (' ')
proper name ('Main')
whitespace (' ')
where ('where')
whitespace ('\n\n')
layout start ('')
import ('import')
whitespace (' ')
proper name ('Prelude')
whitespace ('\n')
layout separator ('')
import ('import')
whitespace (' ')
module prefix ('Control.Monad.')
proper name ('Eff')
whitespace (' ')
( ('(')
proper name ('Eff')
) (')')
whitespace ('\n')
layout separator ('')
import ('import')
whitespace (' ')
module prefix ('Control.Monad.Eff.')
proper name ('Console')
whitespace (' ')
( ('(')
proper name ('CONSOLE')
, (',')
whitespace (' ')
identifier ('log')
) (')')
whitespace ('\n')
layout separator ('')
import ('import')
whitespace (' ')
module prefix ('Data.')
proper name ('Newtype')
whitespace (' ')
( ('(')
class ('class')
whitespace (' ')
proper name ('Newtype')
, (',')
whitespace (' ')
identifier ('unwrap')
) (')')
whitespace ('\n\n')
layout separator ('')
class ('class')
whitespace (' ')
proper name ('TypeEquals')
whitespace (' ')
identifier ('a')
whitespace (' ')
identifier ('b')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('a')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('b')
, (',')
whitespace (' ')
identifier ('b')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('a')
whitespace (' ')
where ('where')
whitespace ('\n  ')
layout start ('')
identifier ('coerce')
whitespace (' ')
:: ('::')
whitespace (' ')
identifier ('a')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('b')
whitespace ('\n  ')
layout separator ('')
identifier ('coerceBack')
whitespace (' ')
:: ('::')
whitespace (' ')
identifier ('b')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('a')
whitespace ('\n\n')
layout end ('')
layout separator ('')
instance ('instance')
whitespace (' ')
identifier ('refl')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('TypeEquals')
whitespace (' ')
identifier ('a')
whitespace (' ')
identifier ('a')
whitespace (' ')
where ('where')
whitespace ('\n  ')
layout start ('')
identifier ('coerce')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('id')
whitespace ('\n  ')
layout separator ('')
identifier ('coerceBack')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('id')
whitespace ('\n\n')
layout end ('')
layout separator ('')
newtype ('newtype')
whitespace (' ')
proper name ('RecordNewtype')
whitespace (' ')
= ('=')
whitespace (' ')
proper name ('RecordNewtype')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('String')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
instance ('instance')
whitespace (' ')
identifier ('newtypeRecordNewtype')
whitespace (' ')
:: ('::')
whitespace ('\n  ')
proper name ('TypeEquals')
whitespace (' ')
identifier ('inner')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('String')
whitespace (' ')
} ('}')
whitespace ('\n    ')
=> ('=>')
whitespace (' ')
proper name ('Newtype')
whitespace (' ')
proper name ('RecordNewtype')
whitespace (' ')
identifier ('inner')
whitespace (' ')
where ('where')
whitespace ('\n  ')
layout start ('')
identifier ('wrap')
whitespace (' ')
= ('=')
whitespace (' ')
proper name ('RecordNewtype')
whitespace (' ')
operator ('<<<')
whitespace (' ')
identifier ('coerce')
whitespace ('\n  ')
layout separator ('')
identifier ('unwrap')
whitespace (' ')
( ('(')
proper name ('RecordNewtype')
whitespace (' ')
identifier ('rec')
) (')')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('coerceBack')
whitespace (' ')
identifier ('rec')
whitespace ('\n\n')
layout end ('')
layout separator ('')
identifier ('main')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Eff')
whitespace (' ')
( ('(')
identifier ('console')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('CONSOLE')
) (')')
whitespace (' ')
proper name ('Unit')
whitespace ('\n')
layout separator ('')
identifier ('main')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('log')
whitespace (' ')
( ('(')
identifier ('unwrap')
whitespace (' ')
( ('(')
proper name ('RecordNewtype')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('x')
operator (':')
whitespace (' ')
string ('"Done"')
whitespace (' ')
} ('}')
) (')')
) (')')
. ('.')
identifier ('x')
layout end ('')
