module ('module')
whitespace (' ')
proper name ('Main')
whitespace (' ')
where ('where')
whitespace ('\n\n')
layout start ('')
import ('import')
whitespace (' ')
proper name ('Prelude')
whitespace ('\n')
layout separator ('')
import ('import')
whitespace (' ')
proper name ('Control')
. ('.')
proper name ('Monad')
. ('.')
proper name ('Eff')
. ('.')
proper name ('Console')
whitespace (' ')
( ('(')
identifier ('log')
) (')')
whitespace ('\n\n')
layout separator ('')
class ('class')
whitespace (' ')
proper name ('T')
whitespace (' ')
identifier ('s')
whitespace (' ')
identifier ('m')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('m')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('s')
whitespace (' ')
where ('where')
whitespace ('\n  ')
layout start ('')
identifier ('state')
whitespace (' ')
:: ('::')
whitespace (' ')
( ('(')
identifier ('s')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('s')
) (')')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('m')
whitespace (' ')
proper name ('Unit')
whitespace ('\n\n')
layout end ('')
layout separator ('')
data ('data')
whitespace (' ')
proper name ('S')
whitespace (' ')
identifier ('s')
whitespace (' ')
identifier ('a')
whitespace (' ')
= ('=')
whitespace (' ')
proper name ('S')
whitespace (' ')
( ('(')
identifier ('s')
whitespace (' ')
-> ('->')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('new')
whitespace (' ')
:: ('::')
whitespace (' ')
identifier ('s')
, (',')
whitespace (' ')
identifier ('ret')
whitespace (' ')
:: ('::')
whitespace (' ')
identifier ('a')
whitespace (' ')
} ('}')
) (')')
whitespace ('\n\n')
layout separator ('')
instance ('instance')
whitespace (' ')
identifier ('st')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('T')
whitespace (' ')
identifier ('s')
whitespace (' ')
( ('(')
proper name ('S')
whitespace (' ')
identifier ('s')
) (')')
whitespace (' ')
where ('where')
whitespace ('\n  ')
layout start ('')
identifier ('state')
whitespace (' ')
identifier ('f')
whitespace (' ')
= ('=')
whitespace (' ')
proper name ('S')
whitespace (' ')
operator ('$')
whitespace (' ')
\ ('\')
identifier ('s')
whitespace (' ')
-> ('->')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('new')
operator (':')
whitespace (' ')
identifier ('f')
whitespace (' ')
identifier ('s')
, (',')
whitespace (' ')
identifier ('ret')
operator (':')
whitespace (' ')
identifier ('unit')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout end ('')
layout separator ('')
identifier ('test1')
whitespace (' ')
:: ('::')
whitespace (' ')
forall ('forall')
whitespace (' ')
identifier ('r')
whitespace (' ')
. ('.')
whitespace (' ')
proper name ('S')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('foo')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('String')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('r')
whitespace (' ')
} ('}')
whitespace (' ')
proper name ('Unit')
whitespace ('\n')
layout separator ('')
identifier ('test1')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('state')
whitespace (' ')
operator ('$')
whitespace (' ')
\ ('\')
identifier ('o')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('o')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('foo')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('o')
. ('.')
identifier ('foo')
whitespace (' ')
operator ('<>')
whitespace (' ')
string ('"!"')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
identifier ('test2')
whitespace (' ')
:: ('::')
whitespace (' ')
forall ('forall')
whitespace (' ')
identifier ('m')
whitespace (' ')
identifier ('r')
whitespace (' ')
. ('.')
whitespace (' ')
proper name ('T')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('foo')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('String')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('r')
whitespace (' ')
} ('}')
whitespace (' ')
identifier ('m')
whitespace (' ')
=> ('=>')
whitespace (' ')
identifier ('m')
whitespace (' ')
proper name ('Unit')
whitespace ('\n')
layout separator ('')
identifier ('test2')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('state')
whitespace (' ')
operator ('$')
whitespace (' ')
\ ('\')
identifier ('o')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('o')
whitespace (' ')
{ ('{')
whitespace (' ')
identifier ('foo')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('o')
. ('.')
identifier ('foo')
whitespace (' ')
operator ('<>')
whitespace (' ')
string ('"!"')
whitespace (' ')
} ('}')
whitespace ('\n\n')
layout separator ('')
identifier ('main')
whitespace (' ')
= ('=')
whitespace (' ')
do ('do')
whitespace ('\n  ')
layout start ('')
let ('let')
whitespace (' ')
layout start ('')
identifier ('t1')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('test1')
whitespace ('\n  ')
layout end ('')
layout separator ('')
let ('let')
whitespace (' ')
layout start ('')
identifier ('t2')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('test2')
whitespace ('\n  ')
layout end ('')
layout separator ('')
identifier ('log')
whitespace (' ')
string ('"Done"')
layout end ('')
layout end ('')
