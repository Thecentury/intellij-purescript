module ('module')
WHITE_SPACE (' ')
proper name ('Main')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n\n')
layout start ('')
import ('import')
WHITE_SPACE (' ')
proper name ('Prelude')
WHITE_SPACE ('\n')
layout separator ('')
import ('import')
WHITE_SPACE (' ')
module prefix ('Control.Monad.Eff.')
proper name ('Console')
WHITE_SPACE (' ')
( ('(')
identifier ('log')
) (')')
WHITE_SPACE ('\n\n')
layout separator ('')
class ('class')
WHITE_SPACE (' ')
proper name ('T')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
identifier ('m')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('m')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n  ')
layout start ('')
identifier ('state')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('s')
) (')')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('m')
WHITE_SPACE (' ')
proper name ('Unit')
layout end ('')
WHITE_SPACE ('\n\n')
layout separator ('')
data ('data')
WHITE_SPACE (' ')
proper name ('S')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
proper name ('S')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('new')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
} ('}')
) (')')
WHITE_SPACE ('\n\n')
layout separator ('')
instance ('instance')
WHITE_SPACE (' ')
identifier ('st')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
proper name ('T')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
( ('(')
proper name ('S')
WHITE_SPACE (' ')
identifier ('s')
) (')')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n  ')
layout start ('')
identifier ('state')
WHITE_SPACE (' ')
identifier ('f')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
proper name ('S')
WHITE_SPACE (' ')
operator ('$')
WHITE_SPACE (' ')
\ ('\')
identifier ('s')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('new')
:: (':')
WHITE_SPACE (' ')
identifier ('f')
WHITE_SPACE (' ')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('ret')
:: (':')
WHITE_SPACE (' ')
identifier ('unit')
WHITE_SPACE (' ')
} ('}')
layout end ('')
WHITE_SPACE ('\n\n')
layout separator ('')
identifier ('test1')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
forall ('forall')
WHITE_SPACE (' ')
identifier ('r')
WHITE_SPACE (' ')
. ('.')
WHITE_SPACE (' ')
proper name ('S')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('foo')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
proper name ('String')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('r')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
proper name ('Unit')
WHITE_SPACE ('\n')
layout separator ('')
identifier ('test1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('state')
WHITE_SPACE (' ')
operator ('$')
WHITE_SPACE (' ')
\ ('\')
identifier ('o')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('o')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('foo')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('o')
. ('.')
identifier ('foo')
WHITE_SPACE (' ')
operator ('<>')
WHITE_SPACE (' ')
string ('"!"')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n\n')
layout separator ('')
identifier ('test2')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
forall ('forall')
WHITE_SPACE (' ')
identifier ('m')
WHITE_SPACE (' ')
identifier ('r')
WHITE_SPACE (' ')
. ('.')
WHITE_SPACE (' ')
proper name ('T')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('foo')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
proper name ('String')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('r')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE (' ')
identifier ('m')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('m')
WHITE_SPACE (' ')
proper name ('Unit')
WHITE_SPACE ('\n')
layout separator ('')
identifier ('test2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('state')
WHITE_SPACE (' ')
operator ('$')
WHITE_SPACE (' ')
\ ('\')
identifier ('o')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('o')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('foo')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('o')
. ('.')
identifier ('foo')
WHITE_SPACE (' ')
operator ('<>')
WHITE_SPACE (' ')
string ('"!"')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n\n')
layout separator ('')
identifier ('main')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
do ('do')
WHITE_SPACE ('\n  ')
layout start ('')
let ('let')
WHITE_SPACE (' ')
layout start ('')
identifier ('t1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('test1')
layout end ('')
WHITE_SPACE ('\n  ')
layout separator ('')
let ('let')
WHITE_SPACE (' ')
layout start ('')
identifier ('t2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('test2')
layout end ('')
WHITE_SPACE ('\n  ')
layout separator ('')
identifier ('log')
WHITE_SPACE (' ')
string ('"Done"')
layout end ('')
layout end ('')
