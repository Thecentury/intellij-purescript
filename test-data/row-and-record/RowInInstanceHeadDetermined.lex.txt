module ('module')
whitespace (' ')
proper name ('Main')
whitespace (' ')
where ('where')
whitespace ('\n\n')
layout start ('')
import ('import')
whitespace (' ')
proper name ('Prelude')
whitespace ('\n')
layout separator ('')
import ('import')
whitespace (' ')
module prefix ('Control.Monad.Eff.')
proper name ('Console')
whitespace (' ')
( ('(')
identifier ('log')
) (')')
whitespace ('\n\n')
layout separator ('')
data ('data')
whitespace (' ')
proper name ('Empty')
whitespace (' ')
= ('=')
whitespace (' ')
proper name ('Empty')
whitespace ('\n')
layout separator ('')
data ('data')
whitespace (' ')
proper name ('Cons')
whitespace (' ')
= ('=')
whitespace (' ')
proper name ('Cons')
whitespace ('\n\n\n-- simple case\n')
layout separator ('')
class ('class')
whitespace (' ')
proper name ('Simple')
whitespace (' ')
identifier ('a')
whitespace (' ')
identifier ('b')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('a')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('b')
whitespace (' ')
where ('where')
whitespace (' ')
layout start ('')
identifier ('c')
whitespace (' ')
:: ('::')
whitespace (' ')
identifier ('a')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('b')
whitespace ('\n')
layout end ('')
layout separator ('')
instance ('instance')
whitespace (' ')
identifier ('simple0')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Simple')
whitespace (' ')
proper name ('Empty')
whitespace (' ')
{ ('{')
} ('}')
whitespace (' ')
where ('where')
whitespace (' ')
layout start ('')
identifier ('c')
whitespace (' ')
identifier ('_')
whitespace (' ')
= ('=')
whitespace (' ')
{ ('{')
} ('}')
whitespace ('\n')
layout end ('')
layout separator ('')
instance ('instance')
whitespace (' ')
identifier ('simple1')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Simple')
whitespace (' ')
proper name ('Cons')
whitespace (' ')
{ ('{')
identifier ('foo')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Cons')
} ('}')
whitespace (' ')
where ('where')
whitespace (' ')
layout start ('')
identifier ('c')
whitespace (' ')
identifier ('cons')
whitespace (' ')
= ('=')
whitespace (' ')
{ ('{')
identifier ('foo')
operator (':')
whitespace (' ')
identifier ('cons')
} ('}')
whitespace ('\n\n\n-- simple transitive example\n')
layout end ('')
layout separator ('')
class ('class')
whitespace (' ')
proper name ('Transitive')
whitespace (' ')
identifier ('a')
whitespace (' ')
identifier ('b')
whitespace (' ')
identifier ('c')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('a')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('b')
, (',')
whitespace (' ')
identifier ('b')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('c')
whitespace (' ')
where ('where')
whitespace (' ')
layout start ('')
identifier ('d')
whitespace (' ')
:: ('::')
whitespace (' ')
identifier ('a')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('c')
whitespace ('\n')
layout end ('')
layout separator ('')
instance ('instance')
whitespace (' ')
identifier ('transitive')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Transitive')
whitespace (' ')
proper name ('Empty')
whitespace (' ')
{ ('{')
} ('}')
whitespace (' ')
{ ('{')
} ('}')
whitespace (' ')
where ('where')
whitespace (' ')
layout start ('')
identifier ('d')
whitespace (' ')
identifier ('_')
whitespace (' ')
= ('=')
whitespace (' ')
{ ('{')
} ('}')
whitespace ('\n\n\n-- transitive example with cycles\n')
layout end ('')
layout separator ('')
class ('class')
whitespace (' ')
proper name ('Cyclic')
whitespace (' ')
identifier ('a')
whitespace (' ')
identifier ('b')
whitespace (' ')
identifier ('c')
whitespace (' ')
identifier ('d')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('a')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('b')
, (',')
whitespace (' ')
identifier ('b')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('a')
whitespace ('\n                     ')
, (',')
whitespace (' ')
identifier ('a')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('c')
whitespace ('\n                     ')
, (',')
whitespace (' ')
identifier ('c')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('d')
, (',')
whitespace (' ')
identifier ('d')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('c')
whitespace ('\n')
layout separator ('')
instance ('instance')
whitespace (' ')
identifier ('cyclic')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('Cyclic')
whitespace (' ')
proper name ('Empty')
whitespace (' ')
proper name ('Empty')
whitespace (' ')
{ ('{')
} ('}')
whitespace (' ')
{ ('{')
} ('}')
whitespace ('\n\n\n-- Determined cycle\n')
layout separator ('')
class ('class')
whitespace (' ')
proper name ('DeterminedCycle')
whitespace (' ')
identifier ('a')
whitespace (' ')
identifier ('b')
whitespace (' ')
identifier ('c')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('a')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('b')
whitespace ('\n                            ')
, (',')
whitespace (' ')
identifier ('b')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('c')
, (',')
whitespace (' ')
identifier ('c')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('b')
whitespace ('\n')
layout separator ('')
instance ('instance')
whitespace (' ')
identifier ('determinedCycle')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('DeterminedCycle')
whitespace (' ')
proper name ('Empty')
whitespace (' ')
{ ('{')
} ('}')
whitespace (' ')
{ ('{')
} ('}')
whitespace ('\n\n\n-- multiple determiners\n')
layout separator ('')
class ('class')
whitespace (' ')
proper name ('MultipleDeterminers')
whitespace (' ')
identifier ('a')
whitespace (' ')
identifier ('b')
whitespace (' ')
identifier ('c')
whitespace (' ')
identifier ('d')
whitespace (' ')
| ('|')
whitespace (' ')
identifier ('a')
whitespace (' ')
identifier ('b')
whitespace (' ')
-> ('->')
whitespace (' ')
identifier ('c')
whitespace (' ')
identifier ('d')
whitespace ('\n')
layout separator ('')
instance ('instance')
whitespace (' ')
identifier ('multipleDeterminers')
whitespace (' ')
:: ('::')
whitespace (' ')
proper name ('MultipleDeterminers')
whitespace (' ')
proper name ('Empty')
whitespace (' ')
proper name ('Empty')
whitespace (' ')
{ ('{')
} ('}')
whitespace (' ')
{ ('{')
} ('}')
whitespace ('\n\n\n')
layout separator ('')
identifier ('main')
whitespace (' ')
= ('=')
whitespace (' ')
identifier ('log')
whitespace (' ')
string ('"Done"')
layout end ('')
