module ('module')
WHITE_SPACE (' ')
proper name ('Main')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE ('\n\n')
layout start ('')
import ('import')
WHITE_SPACE (' ')
proper name ('Prelude')
WHITE_SPACE ('\n')
layout separator ('')
import ('import')
WHITE_SPACE (' ')
module prefix ('Control.Monad.Eff.')
proper name ('Console')
WHITE_SPACE (' ')
( ('(')
identifier ('log')
) (')')
WHITE_SPACE ('\n\n')
layout separator ('')
data ('data')
WHITE_SPACE (' ')
proper name ('Empty')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
proper name ('Empty')
WHITE_SPACE ('\n')
layout separator ('')
data ('data')
WHITE_SPACE (' ')
proper name ('Cons')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
proper name ('Cons')
WHITE_SPACE ('\n\n\n-- simple case\n')
layout separator ('')
class ('class')
WHITE_SPACE (' ')
proper name ('Simple')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE (' ')
layout start ('')
identifier ('c')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('b')
layout end ('')
WHITE_SPACE ('\n')
layout separator ('')
instance ('instance')
WHITE_SPACE (' ')
identifier ('simple0')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
proper name ('Simple')
WHITE_SPACE (' ')
proper name ('Empty')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE (' ')
layout start ('')
identifier ('c')
WHITE_SPACE (' ')
wildcard ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
layout end ('')
WHITE_SPACE ('\n')
layout separator ('')
instance ('instance')
WHITE_SPACE (' ')
identifier ('simple1')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
proper name ('Simple')
WHITE_SPACE (' ')
proper name ('Cons')
WHITE_SPACE (' ')
{ ('{')
identifier ('foo')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
proper name ('Cons')
} ('}')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE (' ')
layout start ('')
identifier ('c')
WHITE_SPACE (' ')
identifier ('cons')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('foo')
:: (':')
WHITE_SPACE (' ')
identifier ('cons')
} ('}')
layout end ('')
WHITE_SPACE ('\n\n\n-- simple transitive example\n')
layout separator ('')
class ('class')
WHITE_SPACE (' ')
proper name ('Transitive')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('b')
, (',')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE (' ')
layout start ('')
identifier ('d')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('c')
layout end ('')
WHITE_SPACE ('\n')
layout separator ('')
instance ('instance')
WHITE_SPACE (' ')
identifier ('transitive')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
proper name ('Transitive')
WHITE_SPACE (' ')
proper name ('Empty')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE (' ')
where ('where')
WHITE_SPACE (' ')
layout start ('')
identifier ('d')
WHITE_SPACE (' ')
wildcard ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
layout end ('')
WHITE_SPACE ('\n\n\n-- transitive example with cycles\n')
layout separator ('')
class ('class')
WHITE_SPACE (' ')
proper name ('Cyclic')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('b')
, (',')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE ('\n                     ')
, (',')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE ('\n                     ')
, (',')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('d')
, (',')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE ('\n')
layout separator ('')
instance ('instance')
WHITE_SPACE (' ')
identifier ('cyclic')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
proper name ('Cyclic')
WHITE_SPACE (' ')
proper name ('Empty')
WHITE_SPACE (' ')
proper name ('Empty')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE ('\n\n\n-- Determined cycle\n')
layout separator ('')
class ('class')
WHITE_SPACE (' ')
proper name ('DeterminedCycle')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE ('\n                            ')
, (',')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('c')
, (',')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE ('\n')
layout separator ('')
instance ('instance')
WHITE_SPACE (' ')
identifier ('determinedCycle')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
proper name ('DeterminedCycle')
WHITE_SPACE (' ')
proper name ('Empty')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE ('\n\n\n-- multiple determiners\n')
layout separator ('')
class ('class')
WHITE_SPACE (' ')
proper name ('MultipleDeterminers')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
| ('|')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('c')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE ('\n')
layout separator ('')
instance ('instance')
WHITE_SPACE (' ')
identifier ('multipleDeterminers')
WHITE_SPACE (' ')
:: ('::')
WHITE_SPACE (' ')
proper name ('MultipleDeterminers')
WHITE_SPACE (' ')
proper name ('Empty')
WHITE_SPACE (' ')
proper name ('Empty')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE ('\n\n\n')
layout separator ('')
identifier ('main')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('log')
WHITE_SPACE (' ')
string ('"Done"')
layout end ('')
